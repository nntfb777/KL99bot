import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, CommandHandler, MessageHandler, filters
from telegram.constants import ParseMode
from telegram.helpers import escape_markdown
import database, config
from texts import RESPONSE_MESSAGES
from .core import _remove_buttons, back_to_menu_handler, cancel

logger = logging.getLogger(__name__)

# ƒê·∫£m b·∫£o c√°c tr·∫°ng th√°i n√†y ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ch√≠nh x√°c
SHOW_SHARE_MENU, AWAIT_USERNAME_FOR_SHARE_REWARD = range(2)

# last_admin_share_msg_id v√† last_admin_share_chat_id c·∫ßn ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü c·∫•p ƒë·ªô module n·∫øu ƒë∆∞·ª£c s·ª≠ d·ª•ng
# V√≠ d·ª•:
last_admin_share_msg_id = {}
last_admin_share_chat_id = {}

async def share_code_entry_point(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.message: await _remove_buttons(query)

    user_id = query.from_user.id
    user_s_data = database.get_user_data(user_id)
    share_count = user_s_data.get("share_count", 0)

    claimed_milestones = [int(k) for k in user_s_data.get("claimed_share_milestones", {}).keys()]

    next_milestone_val = RESPONSE_MESSAGES["all_milestones_achieved_text"]
    needed_shares_val = "N/A"

    # T√¨m m·ªëc th∆∞·ªüng ti·∫øp theo
    found_next_milestone = False
    for ms in config.SHARE_MILESTONES:
        if ms not in claimed_milestones:
            next_milestone_val = f"{ms} l∆∞·ª£t"
            needed_shares_val = max(0, ms - share_count)
            found_next_milestone = True
            break

    intro_text = ""
    if found_next_milestone:
        intro_text = RESPONSE_MESSAGES["share_code_intro"].format(
            share_count=share_count,
            next_milestone=next_milestone_val,
            needed_shares=needed_shares_val
        )
    else:
        # N·∫øu ƒë√£ ƒë·∫°t t·∫•t c·∫£ c√°c m·ªëc
        intro_text = RESPONSE_MESSAGES["share_code_intro_no_shares_all_claimed"].format( # ƒê·∫£m b·∫£o key n√†y c√≥ trong texts.py
            share_count=share_count
        )


    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES["get_my_share_link_button"], callback_data='get_my_share_link')],
    ]

    # Ch·ªâ hi·ªÉn th·ªã n√∫t "Nh·∫≠n Code th∆∞·ªüng" n·∫øu c√≥ m·ªëc ch∆∞a nh·∫≠n
    # N√∫t n√†y s·∫Ω d·∫´n ƒë·∫øn request_code_reward_callback ƒë·ªÉ ch·ªçn m·ªëc
    if found_next_milestone and needed_shares_val <= 0: # Ch·ªâ hi·ªÉn th·ªã khi ƒë√£ ƒë·ªß l∆∞·ª£t chia s·∫ª cho m·ªëc ti·∫øp theo
        keyboard.append([InlineKeyboardButton(RESPONSE_MESSAGES["request_code_reward_button"], callback_data='request_code_reward')])
    elif not found_next_milestone: # ƒê√£ nh·∫≠n t·∫•t c·∫£ c√°c m·ªëc
        # N√∫t ki·ªÉm tra tr·∫°ng th√°i th∆∞·ªüng (n·∫øu c√≥)
        keyboard.append([InlineKeyboardButton(RESPONSE_MESSAGES["check_reward_button_text"], callback_data='check_reward_status')])

    keyboard.append([InlineKeyboardButton(RESPONSE_MESSAGES["back_to_menu_button"], callback_data='back_to_menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=intro_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return SHOW_SHARE_MENU

async def share_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Hi·ªÉn th·ªã menu Chia s·∫ª nh·∫≠n th∆∞·ªüng."""
    query = update.callback_query
    if query:
        await query.answer()
        if query.message:
            from .core import _remove_buttons
            await _remove_buttons(query)

    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES["share_request_code_button"], callback_data='request_code_reward')],
        [InlineKeyboardButton(RESPONSE_MESSAGES["share_get_link_button"], callback_data='get_my_share_link')],
        # B·∫°n c√≥ th·ªÉ th√™m n√∫t ki·ªÉm tra tr·∫°ng th√°i th∆∞·ªüng n·∫øu c√≥ t√≠nh nƒÉng n√†y
        # [InlineKeyboardButton(RESPONSE_MESSAGES["share_reward_status_button"], callback_data='check_share_reward_status')],
        [InlineKeyboardButton(RESPONSE_MESSAGES["back_to_menu_button"], callback_data='back_to_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.effective_chat.send_message(
        RESPONSE_MESSAGES["share_menu_intro"], # ƒê·∫£m b·∫£o kh√≥a n√†y c√≥ trong texts.py c·ªßa b·∫°n
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )

# H√†m n√†y s·∫Ω ƒë∆∞·ª£c gi·ªØ l·∫°i v√† l√† h√†m x·ª≠ l√Ω username ch√≠nh
async def process_username_for_share_reward(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    game_username = update.message.text.strip()
    milestone = context.user_data.get('share_reward_milestone') # L·∫•y t·ª´ context.user_data

    if not milestone:
        await update.message.reply_text("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i t·ª´ ƒë·∫ßu.")
        return ConversationHandler.END

    admin_text = (f"üîó *Y√äU C·∫¶U NH·∫¨N TH∆Ø·ªûNG CHIA S·∫∫ M·ªöI* üîó\n\n" # ƒê√£ s·ª≠a double backslash
                  f"üë§ Kh√°ch: {user.mention_markdown_v2()} `({user.id})`\n"
                  f"üéÆ T√™n game: `{escape_markdown(game_username, version=2)}`\n"
                  f"üèÜ M·ªëc th∆∞·ªüng: *{escape_markdown(str(milestone), version=2)} l∆∞·ª£t*")

    keyboard = [[
        InlineKeyboardButton("‚úÖ Duy·ªát", callback_data=f"admin_share_resp:{user.id}:approve:{milestone}:{game_username}"),
        InlineKeyboardButton("‚ùå Sai ID", callback_data=f"admin_share_resp:{user.id}:sai_id:{milestone}:{game_username}"),
        InlineKeyboardButton("‚ÑπÔ∏è CSKH", callback_data=f"admin_share_resp:{user.id}:contact_cskh:{milestone}:{game_username}")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        admin_msg = await context.bot.send_message(
            chat_id=config.ID_GROUP_PROMO, # G·ª≠i ƒë·∫øn nh√≥m admin ho·∫∑c nh√≥m promo
            text=admin_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        # L∆ØU TR·ªÆ message_id C·ª¶A TIN NH·∫ÆN ADMIN V√ÄO DATABASE
        database.update_user_data(user.id, {
            'last_admin_share_msg_id': admin_msg.message_id,
            'last_admin_share_chat_id': config.ID_GROUP_PROMO
        })

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i "pending" v√†o database
        user_s_data = database.get_user_data(user.id)
        pending_milestones = user_s_data.get("pending_share_milestones", {})
        pending_milestones[str(milestone)] = True # ƒê√°nh d·∫•u m·ªëc n√†y ƒëang ch·ªù x·ª≠ l√Ω
        database.update_user_data(user.id, {'pending_share_milestones': pending_milestones})

        await update.message.reply_text(RESPONSE_MESSAGES["share_reward_request_sent"].format(milestone=milestone, game_username=game_username))
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i y√™u c·∫ßu th∆∞·ªüng chia s·∫ª ƒë·∫øn admin: {e}")
        await update.message.reply_text(RESPONSE_MESSAGES["error_sending_request"])

    return ConversationHandler.END

# H√†m process_share_code_username ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi ƒë√¢y v√¨ tr√πng l·∫∑p ch·ª©c nƒÉng.

async def get_my_share_link_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons(query)

    user_id = query.from_user.id
    user_data = database.get_user_data(user_id)
    referral_code = user_data.get("referral_code")

    if not referral_code:
        logger.warning(f"Ng∆∞·ªùi d√πng {user_id} y√™u c·∫ßu link chia s·∫ª nh∆∞ng kh√¥ng c√≥ referral_code.")
        await query.message.reply_text(RESPONSE_MESSAGES["error_no_referral_code"])
        # Quay l·∫°i menu chia s·∫ª
        return await share_code_entry_point(update, context) 

    bot_info = await context.bot.get_me()
    if not bot_info or not bot_info.username:
        logger.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin username c·ªßa bot.")
        await query.message.reply_text(RESPONSE_MESSAGES["error_getting_bot_info"])
        # Quay l·∫°i menu chia s·∫ª
        return await share_code_entry_point(update, context)

    share_link = f"https://t.me/{bot_info.username}?start=ref_{referral_code}"
    await query.message.reply_text(
        RESPONSE_MESSAGES["my_share_link_message"].format(share_link=escape_markdown(share_link, version=2)),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    # Sau khi g·ª≠i link, quay l·∫°i menu chia s·∫ª
    return await share_code_entry_point(update, context)

async def request_code_reward_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons(query)

    user_id = query.from_user.id
    user_s_data = database.get_user_data(user_id)
    share_count = user_s_data.get("share_count", 0)
    claimed_milestones = [int(k) for k in user_s_data.get("claimed_share_milestones", {}).keys()]
    pending_milestones = user_s_data.get("pending_share_milestones", {})

    eligible_milestones = []
    for ms in config.SHARE_MILESTONES:
        if ms not in claimed_milestones and ms <= share_count and str(ms) not in pending_milestones:
            eligible_milestones.append(ms)
    
    if not eligible_milestones:
        if any(str(ms) in pending_milestones for ms in config.SHARE_MILESTONES):
            # T√¨m m·ªëc ƒëang ch·ªù x·ª≠ l√Ω
            current_pending_milestone = next(iter(pending_milestones.keys()), None)
            await query.message.reply_text(RESPONSE_MESSAGES["pending_claim_exists"].format(milestone=current_pending_milestone))
        else:
            needed_shares = 0
            found_next_potential = False
            for ms in config.SHARE_MILESTONES:
                if ms not in claimed_milestones:
                    needed_shares = max(0, ms - share_count)
                    found_next_potential = True
                    break
            if found_next_potential:
                # N·∫øu c√≥ m·ªëc ti·∫øp theo nh∆∞ng ch∆∞a ƒë·ªß l∆∞·ª£t
                await query.message.reply_text(RESPONSE_MESSAGES["no_new_milestone_message"].format(
                    needed_more=needed_shares,
                    next_milestone=eligible_milestones[0] if eligible_milestones else "M·ªëc ti·∫øp theo" # Fallback n·∫øu kh√¥ng t√¨m th·∫•y
                ))
            else:
                # ƒê√£ nh·∫≠n h·∫øt t·∫•t c·∫£ c√°c m·ªëc v√† kh√¥ng c√≥ m·ªëc n√†o ƒëang ch·ªù x·ª≠ l√Ω
                await query.message.reply_text(RESPONSE_MESSAGES["all_milestones_claimed_message"])
        return SHOW_SHARE_MENU # Lu√¥n quay l·∫°i menu chia s·∫ª sau khi hi·ªÉn th·ªã th√¥ng b√°o

    # Hi·ªÉn th·ªã c√°c n√∫t m·ªëc th∆∞·ªüng ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
    keyboard = []
    for ms in eligible_milestones:
        keyboard.append([InlineKeyboardButton(f"{ms} l∆∞·ª£t", callback_data=f"select_share_reward:{ms}")])
    keyboard.append([InlineKeyboardButton(RESPONSE_MESSAGES["back_to_menu_button"], callback_data='back_to_menu')]) # Ho·∫∑c 'sharing' ƒë·ªÉ quay v·ªÅ menu chia s·∫ª

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        RESPONSE_MESSAGES["select_milestone_for_reward"], # ƒê·∫£m b·∫£o key n√†y c√≥ trong texts.py
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    # H√†m n√†y KH√îNG tr·∫£ v·ªÅ m·ªôt tr·∫°ng th√°i conversation,
    # m√† s·∫Ω hi·ªÉn th·ªã c√°c n√∫t ƒë·ªÉ select_share_reward_callback l√†m entry_point
    return SHOW_SHARE_MENU # Quay l·∫°i SHOW_SHARE_MENU sau khi hi·ªÉn th·ªã c√°c n√∫t m·ªëc

async def select_share_reward_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    milestone = int(query.data.split(':')[1])
    context.user_data['share_reward_milestone'] = milestone # CH·ªàNH S·ª¨A: L∆∞u m·ªëc ƒë√£ ch·ªçn v·ªõi key th·ªëng nh·∫•t

    # Ki·ªÉm tra xem tin nh·∫Øn c√≥ t·ªìn t·∫°i tr∆∞·ªõc khi ch·ªânh s·ª≠a
    if query.message:
        try:
            await query.edit_message_text(
                text=RESPONSE_MESSAGES["ask_game_username_for_share_reward"], # ƒê·∫£m b·∫£o key n√†y c√≥ trong texts.py
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as e:
            logger.warning(f"Could not edit message for share reward selection: {e}. Sending new message.")
            await query.message.reply_text(
                text=RESPONSE_MESSAGES["ask_game_username_for_share_reward"],
                parse_mode=ParseMode.MARKDOWN_V2
            )
    else:
        await update.effective_chat.send_message(
            text=RESPONSE_MESSAGES["ask_game_username_for_share_reward"],
            parse_mode=ParseMode.MARKDOWN_V2
        )
    # CH·ªàNH S·ª¨A: Tr·∫£ v·ªÅ tr·∫°ng th√°i th·ªëng nh·∫•t
    return AWAIT_USERNAME_FOR_SHARE_REWARD

# Conversation Handler cho vi·ªác y√™u c·∫ßu code chia s·∫ª (b·∫Øt ƒë·∫ßu khi ch·ªçn m·ªëc)
share_code_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(select_share_reward_callback, pattern='^select_share_reward:([0-9]+)$')],
    states={
        # ·ªû tr·∫°ng th√°i n√†y, bot s·∫Ω ch·ªù t√™n game sau khi ng∆∞·ªùi d√πng ƒë√£ ch·ªçn m·ªëc
        # CH·ªàNH S·ª¨A: S·ª≠ d·ª•ng tr·∫°ng th√°i v√† h√†m x·ª≠ l√Ω th·ªëng nh·∫•t
        AWAIT_USERNAME_FOR_SHARE_REWARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_username_for_share_reward)],
    },
    fallbacks=[
        CallbackQueryHandler(share_menu_callback, pattern='^sharing$'), # Quay l·∫°i menu chia s·∫ª ch√≠nh
        CommandHandler('cancel', cancel), # L·ªánh /cancel
        CallbackQueryHandler(back_to_menu_handler, pattern='^back_to_menu$'), # Quay l·∫°i menu ch√≠nh t·ªïng th·ªÉ
    ]
)