# features/game_link_handler.py

"""
Module n√†y x·ª≠ l√Ω t·∫•t c·∫£ logic li√™n quan ƒë·∫øn vi·ªác cung c·∫•p, l√†m m·ªõi,
v√† b√°o c√°o l·ªói cho c√°c link truy c·∫≠p game.
"""
import logging
import random
from telegram import Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
import config
from texts import RESPONSE_MESSAGES
from features.fallbacks import get_fallbacks
from utils import helpers, keyboards
from telegram.helpers import escape_markdown
import telegram

logger = logging.getLogger(__name__)

ASK_FOR_IMAGE, AWAITING_IMAGE, AWAITING_VPN_CONFIRMATION  = range(3)

def _escape_url_for_markdownv2(url: str) -> str:
    """Escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong URL cho MarkdownV2 m·ªôt c√°ch an to√†n."""
    # Danh s√°ch c√°c k√Ω t·ª± c·∫ßn escape trong MarkdownV2
    # D·∫•u ` v√† \ l√† c√°c k√Ω t·ª± escape ƒë·∫∑c bi·ªát
    reserved_chars = r'_*[]()~`>#+-=|{}.!'
    # Thay th·∫ø k√Ω t·ª± \ tr∆∞·ªõc, sau ƒë√≥ l√† `
    escaped_url = url.replace('\\', '\\\\').replace('`', '\\`')
    # Escape c√°c k√Ω t·ª± c√≤n l·∫°i
    for char in reserved_chars:
        if char not in ['\\', '`']:
            escaped_url = escaped_url.replace(char, f'\\{char}')
    return escaped_url

async def provide_game_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    X·ª≠ l√Ω callback 'request_game_link'.
    X√ìA tin nh·∫Øn c≈© (n·∫øu c√≥) v√† G·ª¨I m·ªôt tin nh·∫Øn m·ªõi v·ªõi link ng·∫´u nhi√™n.
    """
    query = update.callback_query
    try:
        await query.answer()
    except telegram.error.BadRequest as e:
        if "Query is too old" in str(e):
            logger.info(f"B·ªè qua query ƒë√£ c≈© trong provide_game_link.")
            return # D·ª´ng l·∫°i n·∫øu l√† double-click
        else:
            raise e

    chat_id = update.effective_chat.id




    # 1. Ch·ªçn link ng·∫´u nhi√™n
    random_link = random.choice(config.GAME_LINKS)
    safe_link = _escape_url_for_markdownv2(random_link)

    # 2. T·∫°o n·ªôi dung tin nh·∫Øn
    text = (
        f"{RESPONSE_MESSAGES['provide_game_link_header']}\n"
        f"{RESPONSE_MESSAGES['provide_game_link_body']}\n\n"
        f"**{safe_link}**\n\n"
        f"_{RESPONSE_MESSAGES['provide_game_link_instruction']}_"
    )

    # 3. T·∫°o b√†n ph√≠m m·ªõi
    keyboard = keyboards.create_game_link_options_keyboard(current_link=random_link)

    # 4. G·ª¨I tin nh·∫Øn ho√†n to√†n m·ªõi
    sent_message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=keyboard,
        parse_mode='MarkdownV2'
    )
    helpers.add_message_to_cleanup_list(context, sent_message)
    if query:
        await helpers.delete_message_safely(context.bot, chat_id, query.message.message_id)

async def start_report_flow(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """B·∫Øt ƒë·∫ßu lu·ªìng b√°o c√°o l·ªói, h·ªèi ng∆∞·ªùi d√πng c√≥ ·∫£nh kh√¥ng."""
    query = update.callback_query
    await query.answer()

    try:
        # L·∫•y link h·ªèng t·ª´ callback_data
        broken_link = query.data.split(':', 1)[1]
        context.user_data['broken_link_to_report'] = broken_link
    except IndexError:
        await query.edit_message_text("ƒê√£ x·∫£y ra l·ªói, kh√¥ng t√¨m th·∫•y link ƒë·ªÉ b√°o c√°o.")
        return ConversationHandler.END

    # S·ª≠ d·ª•ng c√°c h√†m t·ª´ file texts.py v√† keyboards.py
    text = RESPONSE_MESSAGES["ask_for_error_image"]
    keyboard = keyboards.create_ask_image_proof_keyboard()
    await helpers.edit_message_safely(query=query, new_text=text, new_reply_markup=keyboard)

    # Chuy·ªÉn sang tr·∫°ng th√°i h·ªèi c√≥ ·∫£nh hay kh√¥ng
    return ASK_FOR_IMAGE

async def request_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Ng∆∞·ªùi d√πng ch·ªçn 'C√≥', y√™u c·∫ßu h·ªç g·ª≠i ·∫£nh."""
    query = update.callback_query
    await query.answer()

    # L∆∞u l·∫°i query n√†y ƒë·ªÉ c√≥ th·ªÉ x√≥a tin nh·∫Øn "Vui l√≤ng g·ª≠i ·∫£nh..." sau
    context.user_data['original_query_message_id'] = query.message.message_id

    text = RESPONSE_MESSAGES["please_send_image"]
    await helpers.edit_message_safely(query=query, new_text=text,new_reply_markup=keyboards.create_back_to_main_menu_markup()) # X√≥a b√†n ph√≠m ƒëi

    # Chuy·ªÉn sang tr·∫°ng th√°i ch·ªù nh·∫≠n ·∫£nh
    return AWAITING_IMAGE

async def ask_for_vpn_confirmation_no_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Ng∆∞·ªùi d√πng ch·ªçn kh√¥ng g·ª≠i ·∫£nh, chuy·ªÉn sang h·ªèi v·ªÅ VPN."""
    query = update.callback_query
    await query.answer()

    await helpers.edit_message_safely(
        query=query,
        new_text=RESPONSE_MESSAGES["ask_about_vpnn"],
        new_reply_markup=keyboards.get_vpn_confirmation_keyboard()
    )
    # Chuy·ªÉn sang tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n VPN
    return AWAITING_VPN_CONFIRMATION

async def ask_for_vpn_confirmation_with_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Nh·∫≠n ·∫£nh, l∆∞u l·∫°i th√¥ng tin v√† h·ªèi v·ªÅ VPN."""
    # L∆ØU √ù: H√†m n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi MessageHandler, kh√¥ng c√≥ query.

    # 1. L∆∞u file_id c·ªßa ·∫£nh v√†o context ƒë·ªÉ d√πng ·ªü b∆∞·ªõc cu·ªëi
    photo_id = update.message.photo[-1].file_id
    context.user_data['report_photo_id'] = photo_id

    # 2. X√≥a tin nh·∫Øn "Vui l√≤ng g·ª≠i ·∫£nh..."
    original_message_id = context.user_data.get('original_query_message_id')
    if original_message_id:
        await helpers.delete_message_safely(context.bot, update.effective_chat.id, original_message_id)

    # 3. X√≥a tin nh·∫Øn ch·ª©a ·∫£nh c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ gi·ªØ chat g·ªçn g√†ng
    await helpers.delete_message_safely(context.bot, update.effective_chat.id, update.message.message_id)

    # 4. G·ª≠i m·ªôt tin nh·∫Øn M·ªöI ƒë·ªÉ h·ªèi v·ªÅ VPN
    await update.effective_chat.send_message(
        text=RESPONSE_MESSAGES["ask_about_vpn"],
        reply_markup=keyboards.get_vpn_confirmation_keyboard()
    )
    # Chuy·ªÉn sang tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n VPN
    return AWAITING_VPN_CONFIRMATION

async def finalize_and_send_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Thu th·∫≠p c√¢u tr·∫£ l·ªùi v·ªÅ VPN, t·ªïng h·ª£p v√† g·ª≠i b√°o c√°o cu·ªëi c√πng."""
    query = update.callback_query

    # L·∫•y th√¥ng tin ƒë√£ l∆∞u t·ª´ c√°c b∆∞·ªõc tr∆∞·ªõc
    user = update.effective_user
    broken_link = context.user_data.get('broken_link_to_report', 'Kh√¥ng x√°c ƒë·ªãnh')
    photo_id = context.user_data.get('report_photo_id')  # S·∫Ω l√† None n·∫øu kh√¥ng c√≥ ·∫£nh
    vpn_choice = query.data  # S·∫Ω l√† 'vpn_yes' ho·∫∑c 'vpn_no'

    uses_vpn = "C√≥" if vpn_choice == 'vpn_yes' else "Kh√¥ng"

    report_caption = (
        f"‚ö†Ô∏è **B√ÅO C√ÅO LINK H·ªéNG** ‚ö†Ô∏è\n\n"
        f"üë§ **Ng∆∞·ªùi d√πng:** [{escape_markdown(user.first_name, version=2)}](tg://user?id={user.id})\n"
        f"üîó **Link l·ªói:** `{_escape_url_for_markdownv2(broken_link)}`\n"
        f"üì± **S·ª≠ d·ª•ng VPN:** {uses_vpn}"
    )

    if config.ID_GROUP_LINK:
        try:
            if photo_id:
                await context.bot.send_photo(
                    chat_id=config.ID_GROUP_LINK,
                    photo=photo_id,
                    caption=report_caption,
                    parse_mode='MarkdownV2'
                )
            else:
                await context.bot.send_message(
                    chat_id=config.ID_GROUP_LINK,
                    text=report_caption,
                    parse_mode='MarkdownV2'
                )
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o cho admin: {e}")

    # ===== G·ª¨I POP-UP TH√ÄNH C√îNG =====
    # V√¨ h√†m n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi CallbackQuery, pop-up s·∫Ω ho·∫°t ƒë·ªông.
    await query.answer(
        RESPONSE_MESSAGES["report_link_success_alert"],
        show_alert=True
    )

    # X√≥a tin nh·∫Øn h·ªèi v·ªÅ VPN (ch√≠nh l√† tin nh·∫Øn ch·ª©a n√∫t v·ª´a b·∫•m)
    await query.delete_message()

    # D·ªçn d·∫πp context
    context.user_data.clear()

    # Cung c·∫•p link game m·ªõi v√† k·∫øt th√∫c
    await provide_game_link(update, context)
    return ConversationHandler.END


async def invalid_message_in_report_flow(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω tin nh·∫Øn kh√¥ng h·ª£p l·ªá trong lu·ªìng b√°o c√°o."""
    await update.message.reply_text(RESPONSE_MESSAGES["invalid_message_in_report_flow"])


# =================================================================
# === ƒê·ªäNH NGHƒ®A CONVERSATION HANDLER =============================
# =================================================================

report_link_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_report_flow, pattern='^report_broken_link:')],
    states={
        ASK_FOR_IMAGE: [
            CallbackQueryHandler(request_image, pattern='^report_error_with_image$'),
            CallbackQueryHandler(ask_for_vpn_confirmation_no_image, pattern='^report_error_without_image$')
        ],
        AWAITING_IMAGE: [
            MessageHandler(filters.PHOTO, ask_for_vpn_confirmation_with_image),
            # Th√™m handler ƒë·ªÉ nh·∫Øc ng∆∞·ªùi d√πng n·∫øu h·ªç g·ª≠i vƒÉn b·∫£n thay v√¨ ·∫£nh
            MessageHandler(filters.TEXT & ~filters.COMMAND, invalid_message_in_report_flow)
        ],
        AWAITING_VPN_CONFIRMATION: [
            CallbackQueryHandler(finalize_and_send_report, pattern=r'^vpn_(yes|no)$')
        ]
    },
    fallbacks=get_fallbacks(),
    block=False,
    name="report_link_conversation"
)