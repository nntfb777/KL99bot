import sys
import telegram # ƒê·∫£m b·∫£o ƒë√£ import
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ApplicationBuilder
)
import datetime
import pytz
import re
import json
import os
import uuid
import logging
import inspect # Th√™m ƒë·ªÉ l·∫•y t√™n h√†m cho logging
from telegram.helpers import escape_markdown



# In ra th√¥ng tin m√¥i tr∆∞·ªùng ƒë·ªÉ g·ª° l·ªói
print(f"Running python-telegram-bot version: {telegram.__version__}")
print(f"Python executable: {sys.executable}")
print(f"sys.path: {sys.path}")

# C·∫•u h√¨nh logging c∆° b·∫£n
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- START IMAGE CONFIGURATION ---


try:
    from KL99 import BOT_TOKEN, APP_DOWNLOAD_LINK, GAME_LINK, TELEGRAM_CHANNEL_LINK, FACEBOOK_LINK, ID_GROUP_PROMO, CSKH_LINK, DATA_FILE, BOT_USERNAME as BOT_USERNAME_CONFIG, SHARE_MILESTONES, START_IMAGE_FILE_ID
    BOT_USERNAME = BOT_USERNAME_CONFIG
except ImportError:
    logger.warning("L·ªói: Kh√¥ng th·ªÉ nh·∫≠p m·ªôt s·ªë c·∫•u h√¨nh t·ª´ KL99.py. S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh.")
    BOT_TOKEN = 'YOUR_FALLBACK_BOT_TOKEN'
    APP_DOWNLOAD_LINK = 'https://example.com/download'
    GAME_LINK = 'https://example.com/game'
    TELEGRAM_CHANNEL_LINK = 'https://t.me/examplechannel'
    FACEBOOK_LINK = 'https://facebook.com/examplepage'
    CSKH_LINK = 'https://example.com/cskh'
    ID_GROUP_PROMO = -1001234567890
    DATA_FILE = 'bot_data.json'
    BOT_USERNAME = None
    SHARE_MILESTONES = [15, 30, 50, 100]
    START_IMAGE_FILE_ID = None # Fallback n·∫øu kh√¥ng c√≥ trong KL99.py
    if BOT_TOKEN == 'YOUR_FALLBACK_BOT_TOKEN':
        logger.error("CRITICAL: BOT_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh!")


try:
    from texts import (
        RESPONSE_MESSAGES,
        PROMO_TEXT_KL001,
        PROMO_TEXT_KL006,
        PROMO_TEXT_KL007,
        PROMO_TEXT_APP_EXPERIENCE,
        YESTERDAY_DMY
    )
except ImportError:
    logger.error("CRITICAL: Kh√¥ng th·ªÉ nh·∫≠p c√°c chu·ªói vƒÉn b·∫£n t·ª´ texts.py. Bot c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng.")
    # Fallback messages
    RESPONSE_MESSAGES = {
        "yeu_cau_dang_xu_ly": "Y√™u c·∫ßu ƒëang x·ª≠ l√Ω (l·ªói texts.py)",
        "welcome_message": "Ch√†o m·ª´ng (l·ªói texts.py)",
        "khuyen_mai_button_text": "üéÅ Nh·∫≠n khuy·∫øn m√£i (l·ªói texts.py)",
        "share_code_button_text": "ü§ù Chia s·∫ª nh·∫≠n Code (l·ªói texts.py)",
        "download_app_button_text": "üì± T·∫£i ·ª©ng d·ª•ng (l·ªói texts.py)",
        "homepage_button_text": "üéÆ Trang ch·ªß (l·ªói texts.py)",
        "facebook_button_text": "üëç Facebook (l·ªói texts.py)",
        "telegram_channel_button_text": "üì£ K√™nh th√¥ng b√°o (l·ªói texts.py)",
        "cskh_button_text": "üí¨ CSKH tr·ª±c tuy·∫øn (l·ªói texts.py)",
        "cannot_refer_self": "B·∫°n kh√¥ng th·ªÉ t·ª± gi·ªõi thi·ªáu ch√≠nh m√¨nh (l·ªói texts.py)",
        "already_referred_error": "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n l√† ƒë∆∞·ª£c gi·ªõi thi·ªáu tr∆∞·ªõc ƒë√≥ (l·ªói texts.py)",
        "referral_successful_notification_to_referrer": "B·∫°n c√≥ l∆∞·ª£t chia s·∫ª m·ªõi! T·ªïng: {share_count} (l·ªói texts.py)",
        "new_user_welcome_referred": "Ch√†o m·ª´ng! B·∫°n ƒë∆∞·ª£c gi·ªõi thi·ªáu b·ªüi {referrer_name} (l·ªói texts.py)",
        "new_user_welcome_referred_generic": "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ch√∫ng t√¥i qua m·ªôt l·ªùi gi·ªõi thi·ªáu! (l·ªói texts.py)",
        "promo_kl001_button": "Khuy·∫øn m√£i n·∫°p ƒë·∫ßu - KL001 (l·ªói texts.py)",
        "promo_kl006_button": "Khuy·∫øn m√£i ƒë·ªôi nh√≥m - KL006 (l·ªói texts.py)",
        "promo_kl007_button": "Si√™u ti·ªÅn th∆∞·ªüng - KL007 (l·ªói texts.py)",
        "promo_app_button": "KM Tr·∫£i nghi·ªám T·∫£i App (l·ªói texts.py)",
        "back_to_menu_button": "‚¨ÖÔ∏è Quay l·∫°i Menu (l·ªói texts.py)",
        "choose_promo_message": "Ch·ªçn khuy·∫øn m√£i: (l·ªói texts.py)",
        "agree_button_text": "‚úÖ ƒê·ªìng √Ω (l·ªói texts.py)",
        "back_to_promo_menu_button_text": "‚¨ÖÔ∏è Quay l·∫°i Menu KM (l·ªói texts.py)",
        "ask_username_kl001_after_agree": "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p (username) c·ªßa b·∫°n: (l·ªói texts.py)",
        "error_sending_request": "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau. (l·ªói texts.py)",
        "ask_username_kl007": "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p (username) c·ªßa b·∫°n: (l·ªói texts.py)",
        "kl006_agree_ask_group_size": "Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng th√†nh vi√™n trong nh√≥m c·ªßa b·∫°n: (l·ªói texts.py)",
        "kl006_ask_usernames": "Cung c·∫•p {group_size} t√™n: (l·ªói texts.py)",
        "kl006_invalid_username_count": "S·ªë l∆∞·ª£ng t√™n ({submitted_count}) kh√¥ng kh·ªõp ({expected_count}). (l·ªói texts.py)",
        "ask_username_app_promo": "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p (username) c·ªßa b·∫°n: (l·ªói texts.py)",
        "app_promo_ask_image": "C√≥ ·∫£nh x√°c nh·∫≠n kh√¥ng? (l·ªói texts.py)",
        "app_promo_request_image": "G·ª≠i ·∫£nh v√†o ƒë√¢y: (l·ªói texts.py)",
        "app_promo_image_sent_to_admin": "ƒê√£ g·ª≠i ·∫£nh. (l·ªói texts.py)",
        "app_promo_no_image_sent_to_admin": "ƒê√£ g·ª≠i y√™u c·∫ßu (kh√¥ng ·∫£nh). (l·ªói texts.py)",
        "app_promo_yeu_cau_hinh_anh": "Admin y√™u c·∫ßu b·∫°n cung c·∫•p h√¨nh ·∫£nh x√°c nh·∫≠n cho KM T·∫£i App. Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i qu√° tr√¨nh ƒëƒÉng k√Ω KM T·∫£i App v√† g·ª≠i k√®m h√¨nh ·∫£nh. (l·ªói texts.py)",
        "thanh_cong_kl007_points": "üéâ Ch√∫c m·ª´ng {customer_username}! B·∫°n ƒë√£ ƒë∆∞·ª£c c·ªông {points} ƒëi·ªÉm th∆∞·ªüng t·ª´ khuy·∫øn m√£i KL007. Vui l√≤ng ki·ªÉm tra t√†i kho·∫£n game. (l·ªói texts.py)",
        "request_cancelled": "Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªè. (l·ªói texts.py)",
        "share_code_intro": "B·∫°n c√≥ {share_count} l∆∞·ª£t chia s·∫ª. M·ªëc k·∫ø: {next_milestone}. C·∫ßn th√™m: {needed_shares} l∆∞·ª£t. (l·ªói texts.py)",
        "share_code_intro_no_shares": "H√£y b·∫Øt ƒë·∫ßu chia s·∫ª ƒë·ªÉ nh·∫≠n th∆∞·ªüng! (l·ªói texts.py)",
        "all_milestones_achieved_text": "ƒê√£ ho√†n th√†nh t·∫•t c·∫£ (l·ªói texts.py)",
        "check_reward_button_text": "Ki·ªÉm tra ph·∫ßn th∆∞·ªüng (l·ªói texts.py)",
        "request_code_reward_button": "üí∞ Nh·∫≠n Code th∆∞·ªüng (l·ªói texts.py)",
        "get_my_share_link_button": "üîó Link chia s·∫ª c·ªßa t√¥i (l·ªói texts.py)",
        "error_getting_bot_info": "L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin bot. Vui l√≤ng th·ª≠ l·∫°i sau. (l·ªói texts.py)",
        "error_no_referral_code": "L·ªói: Kh√¥ng t√¨m th·∫•y m√£ gi·ªõi thi·ªáu. Th·ª≠ l·∫°i /start. (l·ªói texts.py)",
        "my_share_link_message": "Link c·ªßa b·∫°n: {share_link} (l·ªói texts.py)",
        "pending_claim_exists": "Y√™u c·∫ßu tr∆∞·ªõc ƒëang x·ª≠ l√Ω cho m·ªëc {milestone}... (l·ªói texts.py)",
        "cancel_and_back_share_menu_button": "‚¨ÖÔ∏è H·ªßy & Quay l·∫°i (l·ªói texts.py)",
        "ask_username_for_share_reward": "Nh·∫≠p username cho m·ªëc {milestone}: (l·ªói texts.py)",
        "all_milestones_claimed_message": "B·∫°n ƒë√£ nh·∫≠n h·∫øt c√°c m·ªëc th∆∞·ªüng! (l·ªói texts.py)",
        "no_new_milestone_message": "C·∫ßn {needed_more} l∆∞·ª£t cho m·ªëc {next_milestone}. (l·ªói texts.py)",
        "no_milestones_available_at_moment": "Hi·ªán t·∫°i b·∫°n ch∆∞a ƒë·∫°t m·ªëc th∆∞·ªüng m·ªõi ho·∫∑c ƒë√£ nh·∫≠n h·∫øt c√°c m·ªëc c√≥ th·ªÉ. H√£y ti·∫øp t·ª•c chia s·∫ª! (l·ªói texts.py)",
        "error_no_milestone_info": "L·ªói kh√¥ng t√¨m th·∫•y m·ªëc th∆∞·ªüng. Th·ª≠ l·∫°i. (l·ªói texts.py)",
        "back_to_share_menu_button": "‚¨ÖÔ∏è Menu Chia S·∫ª (l·ªói texts.py)",
        "return_to_share_menu_prompt": "Vui l√≤ng quay l·∫°i menu Chia s·∫ª: (l·ªói texts.py)",
        "share_admin_request_text": "Y/c th∆∞·ªüng chia s·∫ª: Kh√°ch {user_first_name} (ID {user_id}), GameUser {game_username}, M·ªëc {milestone} (l·ªói texts.py)",
        "share_reward_request_sent": "ƒê√£ g·ª≠i y/c cho m·ªëc {milestone} v·ªõi t√™n {game_username}. (l·ªói texts.py)",
        "error_sending_to_admin": "L·ªói g·ª≠i y√™u c·∫ßu ƒë·∫øn admin. Th·ª≠ l·∫°i sau. (l·ªói texts.py)",
        "share_reward_approved": "M·ªëc {milestone} ƒë∆∞·ª£c duy·ªát cho {game_username}. (l·ªói texts.py)",
        "share_reward_sai_id": "M·ªëc {milestone}, sai ID. (l·ªói texts.py)",
        "share_reward_contact_cskh": "M·ªëc {milestone}, li√™n h·ªá CSKH. (l·ªói texts.py)"
    }
    PROMO_TEXT_KL001 = "N·ªôi dung KL001 (l·ªói texts.py)"
    PROMO_TEXT_KL006 = "N·ªôi dung KL006 (l·ªói texts.py)"
    PROMO_TEXT_KL007 = "N·ªôi dung KL007 (l·ªói texts.py)"
    PROMO_TEXT_APP_EXPERIENCE = "N·ªôi dung KM T·∫£i App (l·ªói texts.py)"
    YESTERDAY_DMY = datetime.datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')).strftime('%d/%m/%Y')


def load_bot_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                logger.error(f"L·ªói gi·∫£i m√£ JSON trong file {DATA_FILE}. Tr·∫£ v·ªÅ d·ªØ li·ªáu r·ªóng.")
                return {"users": {}, "referral_code_to_user_id_map": {}}
    return {"users": {}, "referral_code_to_user_id_map": {}}

def save_bot_data(data):
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u d·ªØ li·ªáu v√†o {DATA_FILE}: {e}")

def get_user_data_from_json(user_id):
    data = load_bot_data()
    user_id_str = str(user_id)

    if user_id_str not in data["users"]:
        unique_ref_code = str(uuid.uuid4())[:8]
        while unique_ref_code in data["referral_code_to_user_id_map"]:
            unique_ref_code = str(uuid.uuid4())[:8]

        data["users"][user_id_str] = {
            "referral_code": unique_ref_code,
            "share_count": 0,
            "claimed_share_milestones": {},
            "pending_share_milestone_claim": None,
            "was_referred_by_user_id": None,
            "claimed_promos": {}
        }
        data["referral_code_to_user_id_map"][unique_ref_code] = user_id_str
        save_bot_data(data)
        logger.info(f"Kh·ªüi t·∫°o d·ªØ li·ªáu cho ng∆∞·ªùi d√πng m·ªõi: {user_id_str} v·ªõi m√£ gi·ªõi thi·ªáu {unique_ref_code}")
    return data["users"][user_id_str]

# ƒê·ªãnh nghƒ©a c√°c tr·∫°ng th√°i cho ConversationHandler
RECEIVE_USERNAME_KL001 = 1
RECEIVE_USERNAME_KL007 = 2
KL006_CHOOSE_GROUP_SIZE = 3
RECEIVE_USERNAMES_KL006 = 4
RECEIVE_USERNAME_APP_PROMO = 5
AWAIT_IMAGE_CONFIRM_APP_PROMO = 6
RECEIVE_IMAGE_APP_PROMO = 7
AGREE_TERMS_KL001 = 101
AGREE_TERMS_KL007 = 102
AGREE_TERMS_KL006 = 103
AGREE_TERMS_APP_PROMO = 104
SHOW_SHARE_MENU, AWAIT_USERNAME_FOR_SHARE_REWARD = range(105, 107)


async def _remove_buttons_from_previous_message(query: CallbackQuery):
    """H√†m ti·ªán √≠ch ƒë·ªÉ x√≥a n√∫t kh·ªèi tin nh·∫Øn c·ªßa callback query."""
    if query and query.message:
        try:
            await query.edit_message_reply_markup(reply_markup=None)
            logger.info(f"ƒê√£ x√≥a n√∫t t·ª´ tin nh·∫Øn {query.message.message_id} (callback: {query.data})")
        except telegram.error.BadRequest as e:
            if "message is not modified" in str(e).lower() or \
               "message to edit not found" in str(e).lower() or \
               "message can't be edited" in str(e).lower(): # Th√™m "message can't be edited"
                logger.info(f"Tin nh·∫Øn {query.message.message_id} kh√¥ng c√≥ n√∫t, kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng th·ªÉ s·ª≠a ƒë·ªÉ x√≥a n√∫t (callback: {query.data}). L·ªói: {e}")
            else:
                func_name = inspect.currentframe().f_back.f_code.co_name # L·∫•y t√™n h√†m g·ªçi _remove_buttons_from_previous_message
                logger.warning(f"L·ªói khi x√≥a n√∫t t·ª´ tin nh·∫Øn {query.message.message_id} trong h√†m '{func_name}' (callback: {query.data}): {e}")
        except Exception as e: # B·∫Øt c√°c l·ªói kh√°c
            func_name = inspect.currentframe().f_back.f_code.co_name
            logger.error(f"L·ªói kh√¥ng mong mu·ªën khi x√≥a n√∫t t·ª´ tin nh·∫Øn {query.message.message_id} trong h√†m '{func_name}' (callback: {query.data}): {e}")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Update {update} caused error {context.error}", exc_info=context.error)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    global BOT_USERNAME
    if BOT_USERNAME is None and context.bot:
        try:
            bot_info = await context.bot.get_me()
            BOT_USERNAME = bot_info.username
            logger.info(f"T√™n bot ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong /start: {BOT_USERNAME}")
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin bot trong /start: {e}")

    user = update.effective_user
    chat_id = update.effective_chat.id # L·∫•y chat_id m·ªôt c√°ch nh·∫•t qu√°n
    user_id_str = str(user.id)

    if update.message:
        logger.info(f"L·ªánh /start t·ª´ user: {user.id} ({user.username}), Args: {context.args} trong chat {chat_id}")
    elif update.callback_query:
        query = update.callback_query
        logger.info(f"start function called from callback_query: {query.data} by user {query.from_user.id} trong chat {chat_id}")

    get_user_data_from_json(user.id)

    if context.args and len(context.args) > 0 and context.args[0].startswith('ref_') and update.message: # Ch·ªâ x·ª≠ l√Ω referral khi l√† message /start m·ªõi
        referral_code_input = context.args[0][4:]
        all_data = load_bot_data()
        referrer_user_id_str = all_data["referral_code_to_user_id_map"].get(referral_code_input)

        if referrer_user_id_str:
            try:
                referrer_user_id_int = int(referrer_user_id_str)
                if user.id == referrer_user_id_int:
                    await update.message.reply_text(RESPONSE_MESSAGES.get("cannot_refer_self", "B·∫°n kh√¥ng th·ªÉ t·ª± gi·ªõi thi·ªáu ch√≠nh m√¨nh."))
                else:
                    current_user_s_data = all_data["users"].get(user_id_str)
                    if current_user_s_data and current_user_s_data.get("was_referred_by_user_id"):
                        await update.message.reply_text(RESPONSE_MESSAGES.get("already_referred_error", "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n l√† ƒë∆∞·ª£c gi·ªõi thi·ªáu tr∆∞·ªõc ƒë√≥."))
                    else:
                        all_data["users"][user_id_str]["was_referred_by_user_id"] = referrer_user_id_str
                        if referrer_user_id_str in all_data["users"]:
                            all_data["users"][referrer_user_id_str]["share_count"] = all_data["users"][referrer_user_id_str].get("share_count", 0) + 1
                            save_bot_data(all_data)
                            logger.info(f"User {user_id_str} ƒë∆∞·ª£c gi·ªõi thi·ªáu b·ªüi {referrer_user_id_str}. L∆∞·ª£t chia s·∫ª c·ªßa ng∆∞·ªùi gi·ªõi thi·ªáu tƒÉng l√™n {all_data['users'][referrer_user_id_str]['share_count']}.")
                            try:
                                referrer_share_count = all_data["users"][referrer_user_id_str]["share_count"]
                                await context.bot.send_message(
                                    chat_id=referrer_user_id_int,
                                    text=RESPONSE_MESSAGES.get("referral_successful_notification_to_referrer", "B·∫°n c√≥ l∆∞·ª£t chia s·∫ª m·ªõi! T·ªïng: {share_count}").format(share_count=referrer_share_count)
                                )
                            except Exception as e:
                                logger.error(f"Kh√¥ng th·ªÉ th√¥ng b√°o cho ng∆∞·ªùi gi·ªõi thi·ªáu {referrer_user_id_str}: {e}")
                            try:
                                referrer_chat = await context.bot.get_chat(referrer_user_id_int)
                                referrer_display_name = referrer_chat.first_name or referrer_chat.username or f"User {referrer_user_id_str}"
                                await update.message.reply_text(
                                    RESPONSE_MESSAGES.get("new_user_welcome_referred", "Ch√†o m·ª´ng! B·∫°n ƒë∆∞·ª£c gi·ªõi thi·ªáu b·ªüi {referrer_name}.").format(referrer_name=referrer_display_name)
                                )
                            except Exception as e:
                                logger.error(f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi gi·ªõi thi·ªáu {referrer_user_id_str}: {e}")
                                await update.message.reply_text(RESPONSE_MESSAGES.get("new_user_welcome_referred_generic", "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ch√∫ng t√¥i qua m·ªôt l·ªùi gi·ªõi thi·ªáu!"))
                        else:
                            logger.warning(f"ID ng∆∞·ªùi gi·ªõi thi·ªáu {referrer_user_id_str} kh√¥ng t√¨m th·∫•y trong users dict sau khi gi·ªõi thi·ªáu.")
            except ValueError:
                 logger.error(f"L·ªói chuy·ªÉn ƒë·ªïi ID ng∆∞·ªùi gi·ªõi thi·ªáu: {referrer_user_id_str}")
            except Exception as e:
                 logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh x·ª≠ l√Ω gi·ªõi thi·ªáu: {e}")
        else:
            logger.info(f"M√£ gi·ªõi thi·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t√¨m th·∫•y: {referral_code_input}")

    keyboard_buttons = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("khuyen_mai_button_text","üéÅ Nh·∫≠n khuy·∫øn m√£i"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("share_code_button_text","ü§ù Chia s·∫ª nh·∫≠n Code"), callback_data='share_code_entry_point')],
        [
            InlineKeyboardButton(RESPONSE_MESSAGES.get("download_app_button_text","üì± T·∫£i ·ª©ng d·ª•ng"), url=APP_DOWNLOAD_LINK),
            InlineKeyboardButton(RESPONSE_MESSAGES.get("homepage_button_text","üéÆ Trang ch·ªß"), url=GAME_LINK)
        ],
        [
            InlineKeyboardButton(RESPONSE_MESSAGES.get("facebook_button_text","üëç Facebook"), url=FACEBOOK_LINK),
            InlineKeyboardButton(RESPONSE_MESSAGES.get("telegram_channel_button_text","üì£ K√™nh th√¥ng b√°o"), url=TELEGRAM_CHANNEL_LINK)
        ],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard_buttons)
    welcome_caption = RESPONSE_MESSAGES.get("welcome_message", "Ch√†o m·ª´ng b·∫°n!")

    # S·ª≠ d·ª•ng START_IMAGE_FILE_ID ƒë√£ import
    current_start_image_file_id = START_IMAGE_FILE_ID

    if update.message and (not context.args or update.message.text == "/start"):
        if current_start_image_file_id:
            await update.message.reply_photo(
                photo=current_start_image_file_id,
                caption=welcome_caption,
                reply_markup=reply_markup
                # parse_mode='Markdown' # N·∫øu caption c·∫ßn Markdown
            )
        else:
            await update.message.reply_text(welcome_caption, reply_markup=reply_markup)
    elif update.callback_query:
        query = update.callback_query
        await _remove_buttons_from_previous_message(query) # X√≥a n√∫t tr√™n tin nh·∫Øn c≈©

        if current_start_image_file_id:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=current_start_image_file_id,
                caption=welcome_caption,
                reply_markup=reply_markup
                # parse_mode='Markdown' # N·∫øu caption c·∫ßn Markdown
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=welcome_caption,
                reply_markup=reply_markup
            )
        logger.info(f"start: ƒê√£ g·ª≠i tin nh·∫Øn welcome m·ªõi t·ªõi chat {chat_id} sau callback.")

    return ConversationHandler.END


async def khuyen_mai_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: # Ho·∫∑c int n·∫øu l√† state
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query)

    promotions_keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("promo_kl001_button", "Khuy·∫øn m√£i n·∫°p ƒë·∫ßu - KL001"), callback_data='promo_KL001')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("promo_kl006_button", "Khuy·∫øn m√£i ƒë·ªôi nh√≥m - KL006"), callback_data='promo_KL006')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("promo_kl007_button", "Si√™u ti·ªÅn th∆∞·ªüng - KL007"), callback_data='promo_KL007')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("promo_app_button", "KM Tr·∫£i nghi·ªám T·∫£i App"), callback_data='promo_app_experience')],
        [
            InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button", "‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu'),
            InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)
        ]
    ]
    promotions_reply_markup = InlineKeyboardMarkup(promotions_keyboard)
    
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=RESPONSE_MESSAGES.get("choose_promo_message", "Ch·ªçn khuy·∫øn m√£i:"), 
        reply_markup=promotions_reply_markup
    )
    # N·∫øu ƒë√¢y l√† m·ªôt state trong ConversationHandler, c·∫ßn tr·∫£ v·ªÅ state ƒë√≥.
    # N·∫øu l√† fallback v√† mu·ªën k·∫øt th√∫c conversation, tr·∫£ v·ªÅ ConversationHandler.END
    # N·∫øu l√† handler ƒë·ªôc l·∫≠p, kh√¥ng c·∫ßn tr·∫£ v·ªÅ g√¨.


async def promo_KL001_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query)

    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("agree_button_text", "‚úÖ ƒê·ªìng √Ω"), callback_data='agree_terms_kl001')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=PROMO_TEXT_KL001, 
        reply_markup=reply_markup, 
        parse_mode='Markdown'
    )
    return AGREE_TERMS_KL001

async def handle_agree_kl001_terms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query)

    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    ask_username_text = RESPONSE_MESSAGES.get("ask_username_kl001_after_agree", "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p (username) c·ªßa b·∫°n:")
    
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=ask_username_text, 
        reply_markup=reply_markup
    )
    return RECEIVE_USERNAME_KL001

# H√†m receive_username_kl001, receive_username_kl007, receive_usernames_kl006, receive_image_app_promo


async def promo_KL007_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query)
    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("agree_button_text", "‚úÖ ƒê·ªìng √Ω"), callback_data='agree_terms_kl007')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=PROMO_TEXT_KL007, 
        reply_markup=reply_markup, 
        parse_mode='Markdown'
    )
    return AGREE_TERMS_KL007

async def handle_agree_kl007_terms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query)
    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    ask_username_text = RESPONSE_MESSAGES.get("ask_username_kl007", "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p (username) c·ªßa b·∫°n:")
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=ask_username_text, 
        reply_markup=reply_markup
    )
    return RECEIVE_USERNAME_KL007

async def promo_KL006_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query)
    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("agree_button_text", "‚úÖ ƒê·ªìng √Ω"), callback_data='agree_terms_kl006')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=PROMO_TEXT_KL006, 
        reply_markup=reply_markup, 
        parse_mode='Markdown'
    )
    return AGREE_TERMS_KL006

async def handle_agree_kl006_terms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query)
    keyboard = [
        [InlineKeyboardButton("Nh√≥m 3 th√†nh vi√™n", callback_data='kl006_select_group:3')],
        [InlineKeyboardButton("Nh√≥m 5 th√†nh vi√™n", callback_data='kl006_select_group:5')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    ask_group_size_text = RESPONSE_MESSAGES.get("kl006_agree_ask_group_size", "Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng th√†nh vi√™n trong nh√≥m c·ªßa b·∫°n:")
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=ask_group_size_text, 
        reply_markup=reply_markup, 
        parse_mode='Markdown'
    )
    return KL006_CHOOSE_GROUP_SIZE

async def kl006_group_size_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query)
    group_size = int(query.data.split(':')[1])
    context.user_data['kl006_group_size'] = group_size
    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    ask_username_text = RESPONSE_MESSAGES.get("kl006_ask_usernames", "Cung c·∫•p {group_size} t√™n:").format(group_size=group_size)
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=ask_username_text, 
        reply_markup=reply_markup
    )
    return RECEIVE_USERNAMES_KL006

async def kl006_reenter_usernames_after_agree_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query) # X√≥a n√∫t "Nh·∫≠p l·∫°i..." tr√™n tin nh·∫Øn b√°o l·ªói
    group_size = int(query.data.split(':')[1])
    context.user_data['kl006_group_size'] = group_size
    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    ask_username_text = RESPONSE_MESSAGES.get("kl006_ask_usernames", "Cung c·∫•p {group_size} t√™n:").format(group_size=group_size)
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=ask_username_text, 
        reply_markup=reply_markup
    )
    return RECEIVE_USERNAMES_KL006

async def promo_app_experience_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query)
    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("agree_button_text", "‚úÖ ƒê·ªìng √Ω"), callback_data='agree_terms_app_promo')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=PROMO_TEXT_APP_EXPERIENCE, 
        reply_markup=reply_markup, 
        parse_mode='Markdown'
    )
    return AGREE_TERMS_APP_PROMO

async def handle_agree_app_promo_terms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query)
    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    ask_username_text = RESPONSE_MESSAGES.get("ask_username_app_promo", "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p (username) c·ªßa b·∫°n:")
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=ask_username_text, 
        reply_markup=reply_markup
    )
    return RECEIVE_USERNAME_APP_PROMO

async def handle_image_confirm_app_promo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query) # X√≥a n√∫t "C√≥ ·∫£nh/Kh√¥ng c√≥ ·∫£nh"
    
    choice = query.data.split(':')[1]
    if choice == 'yes':
        keyboard = [
            [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
            [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=RESPONSE_MESSAGES.get("app_promo_request_image", "G·ª≠i ·∫£nh v√†o ƒë√¢y:"), 
            reply_markup=reply_markup
        )
        return RECEIVE_IMAGE_APP_PROMO
    else: # choice == 'no'
        # G·ªçi no_image_app_promo, h√†m n√†y s·∫Ω g·ª≠i tin nh·∫Øn m·ªõi
        return await no_image_app_promo(update, context) # update ƒë√£ ch·ª©a query

async def no_image_app_promo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query 
    chat_id_to_reply = None
    user_id = None
    user_first_name = None

    if query:
        # await query.answer() # ƒê√£ answer ·ªü handle_image_confirm_app_promo
        # await _remove_buttons_from_previous_message(query) # ƒê√£ x√≥a ·ªü handle_image_confirm_app_promo
        
        user_id = query.from_user.id
        user_first_name = query.from_user.first_name
        chat_id_to_reply = query.message.chat_id
        
        # G·ª≠i tin nh·∫Øn "Y√™u c·∫ßu ƒëang x·ª≠ l√Ω..." m·ªõi thay v√¨ edit
        await context.bot.send_message(
            chat_id=chat_id_to_reply,
            text=RESPONSE_MESSAGES.get("yeu_cau_dang_xu_ly", "Y√™u c·∫ßu ƒëang x·ª≠ l√Ω...")
        )
    else: 
        logger.error("no_image_app_promo called without a callback_query unexpectedly.")
        return ConversationHandler.END

    customer_username = context.user_data.get('app_promo_username', 'N/A')
    promo_code = "APP_PROMO"
    admin_message_text_to_group = (
        f"Y√™u c·∫ßu {promo_code} (KH√îNG c√≥ ·∫£nh):\n"
        f"Kh√°ch: {user_first_name} (TG ID: {user_id})\n"
        f"T√™n ƒëƒÉng nh·∫≠p: {customer_username}"
    )
    admin_buttons = [ 
        [
            InlineKeyboardButton("Sai ID", callback_data=f"admin_response:{user_id}:sai_id:{promo_code}"),
            InlineKeyboardButton("‚úÖ Th√†nh C√¥ng", callback_data=f"admin_response:{user_id}:app_promo_thanh_cong:{promo_code}")
        ],
        [
            InlineKeyboardButton("ƒê√£ nh·∫≠n KM T·∫£i App", callback_data=f"admin_response:{user_id}:app_promo_da_nhan:{promo_code}"),
            InlineKeyboardButton("Y/c h√¨nh ·∫£nh", callback_data=f"admin_response:{user_id}:app_promo_yeu_cau_hinh_anh:{promo_code}")
        ],
        [
            InlineKeyboardButton("Tr√πng IP (App)", callback_data=f"admin_response:{user_id}:app_promo_trung_ip:{promo_code}"),
            InlineKeyboardButton("ƒê√£ n·∫°p/r√∫t (App)", callback_data=f"admin_response:{user_id}:app_promo_da_nap_rut_nhieu:{promo_code}")
        ],
        [
            InlineKeyboardButton("Ch∆∞a LK NH", callback_data=f"admin_response:{user_id}:chua_lien_ket_ngan_hang:{promo_code}"),
            InlineKeyboardButton("Sai TT (CSKH)", callback_data=f"admin_response:{user_id}:sai_thong_tin_lien_he_cskh:{promo_code}")
        ]
    ]
    admin_reply_markup = InlineKeyboardMarkup(admin_buttons)
    customer_final_buttons = [[InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)], [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')]]
    customer_final_markup = InlineKeyboardMarkup(customer_final_buttons)

    try:
        await context.bot.send_message(
            chat_id=ID_GROUP_PROMO,
            text=admin_message_text_to_group,
            reply_markup=admin_reply_markup
        )
        msg_to_customer = RESPONSE_MESSAGES.get("app_promo_no_image_sent_to_admin", "ƒê√£ g·ª≠i y√™u c·∫ßu (kh√¥ng ·∫£nh).")
        if chat_id_to_reply:
             await context.bot.send_message(chat_id=chat_id_to_reply, text=msg_to_customer, reply_markup=customer_final_markup)
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i y√™u c·∫ßu {promo_code} (kh√¥ng ·∫£nh) ƒë·∫øn nh√≥m: {e}")
        error_message_for_customer = RESPONSE_MESSAGES.get("error_sending_request", "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.")
        if chat_id_to_reply:
            await context.bot.send_message(chat_id=chat_id_to_reply, text=error_message_for_customer, reply_markup=customer_final_markup)

    if 'app_promo_username' in context.user_data: del context.user_data['app_promo_username']
    return ConversationHandler.END

async def re_enter_username_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    await _remove_buttons_from_previous_message(query) # X√≥a n√∫t "ƒêƒÉng k√Ω l·∫°i KM..."

    parts = query.data.split(':') 
    action_type = parts[0] 
    
    promo_code = ""
    next_state = ConversationHandler.END
    promo_text_key = ""
    text_format_params = {}

    if action_type == "re_enter_username": 
        promo_code = parts[1] 
        text_format_params['promo_code'] = promo_code
        if promo_code == "KL001":
            promo_text_key = "ask_username_kl001_after_agree"
            next_state = RECEIVE_USERNAME_KL001
        elif promo_code == "KL007":
            promo_text_key = "ask_username_kl007" 
            next_state = RECEIVE_USERNAME_KL007
        elif promo_code == "APP_PROMO":
            promo_text_key = "ask_username_app_promo"
            next_state = RECEIVE_USERNAME_APP_PROMO
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="M√£ khuy·∫øn m√£i kh√¥ng h·ª£p l·ªá ƒë·ªÉ nh·∫≠p l·∫°i. Vui l√≤ng th·ª≠ l·∫°i t·ª´ Menu Ch√≠nh.")
            return ConversationHandler.END

    elif action_type == "kl006_reenter_usernames_after_agree": 
        promo_code = "KL006"
        group_size = int(parts[1]) 
        context.user_data['kl006_group_size'] = group_size
        promo_text_key = "kl006_ask_usernames"
        text_format_params['group_size'] = group_size
        next_state = RECEIVE_USERNAMES_KL006
    else: 
        await context.bot.send_message(chat_id=query.message.chat_id, text="L·ªói c·∫•u tr√∫c y√™u c·∫ßu nh·∫≠p l·∫°i. Vui l√≤ng th·ª≠ l·∫°i t·ª´ Menu Khuy·∫øn M√£i.")
        return ConversationHandler.END

    final_promo_text = RESPONSE_MESSAGES.get(promo_text_key, "L·ªói: Kh√¥ng t√¨m th·∫•y n·ªôi dung y√™u c·∫ßu. Vui l√≤ng nh·∫≠p th√¥ng tin ƒë∆∞·ª£c y√™u c·∫ßu:")
    if text_format_params:
        try:
            final_promo_text = final_promo_text.format(**text_format_params)
        except KeyError:
            logger.warning(f"L·ªói format text cho re_enter_username: key='{promo_text_key}', params={text_format_params}")

    new_keyboard = [[InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')], 
                    [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]]
    new_reply_markup = InlineKeyboardMarkup(new_keyboard)

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=final_promo_text,
        reply_markup=new_reply_markup
    )
    return next_state

async def back_to_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"back_to_menu_handler called by user {update.effective_user.id}")
    keys_to_clear = ['kl006_group_size', 'app_promo_username', 'milestone_to_claim_share', 'share_reward_milestone']
    for key in keys_to_clear:
        if key in context.user_data:
            del context.user_data[key]
            logger.info(f"Cleared '{key}' from user_data for user {update.effective_user.id}")
    
    if update.callback_query:
        await update.callback_query.answer()
        # await _remove_buttons_from_previous_message(update.callback_query) # start s·∫Ω l√†m vi·ªác n√†y
    
    await start(update, context) # start s·∫Ω x·ª≠ l√Ω vi·ªác x√≥a n√∫t v√† g·ª≠i tin nh·∫Øn m·ªõi
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    cancel_message = RESPONSE_MESSAGES.get("request_cancelled", "Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªè.")
    chat_id = update.effective_chat.id

    if update.message: # User g√µ /cancel
        await update.message.reply_text(cancel_message) # G·ª≠i tin nh·∫Øn cancel m·ªõi
    elif update.callback_query: # User b·∫•m n√∫t cancel (n·∫øu c√≥)
        query = update.callback_query
        await query.answer()
        await _remove_buttons_from_previous_message(query) # X√≥a n√∫t tr√™n tin nh·∫Øn hi·ªán t·∫°i
        await context.bot.send_message(chat_id=chat_id, text=cancel_message) # G·ª≠i tin nh·∫Øn cancel m·ªõi

    keys_to_clear = ['kl006_group_size', 'app_promo_username', 'milestone_to_claim_share', 'share_reward_milestone']
    for key in keys_to_clear:
        if key in context.user_data:
            del context.user_data[key]
            logger.info(f"Cancel: Cleared '{key}' from user_data for user {update.effective_user.id}")
            
    await start(update, context) # start s·∫Ω hi·ªÉn th·ªã menu ch√≠nh m·ªõi
    return ConversationHandler.END

async def share_code_entry_point(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    chat_id = update.effective_chat.id
    if query: 
        await query.answer()
        await _remove_buttons_from_previous_message(query)

    user_id = update.effective_user.id
    user_s_data = get_user_data_from_json(user_id)
    share_count = user_s_data.get("share_count", 0)
    intro_text_key = "share_code_intro"
    format_params = {"share_count": share_count} 
    next_milestone_val = None
    for ms in SHARE_MILESTONES: 
        if str(ms) not in user_s_data.get("claimed_share_milestones", {}):
            if share_count < ms : 
                next_milestone_val = ms 
                break
    
    if next_milestone_val is None: 
        smallest_unclaimed_milestone = None
        for ms_check in sorted(SHARE_MILESTONES):
            if str(ms_check) not in user_s_data.get("claimed_share_milestones", {}):
                smallest_unclaimed_milestone = ms_check
                break
        if smallest_unclaimed_milestone is not None and share_count < smallest_unclaimed_milestone:
            next_milestone_val = smallest_unclaimed_milestone

    if share_count == 0:
        intro_text_key = "share_code_intro_no_shares"
        # ƒê·∫£m b·∫£o c√°c placeholder ƒë∆∞·ª£c cung c·∫•p n·∫øu intro_text_key n√†y c·∫ßn
        if intro_text_key in RESPONSE_MESSAGES and "{next_milestone}" in RESPONSE_MESSAGES[intro_text_key]:
             format_params["next_milestone"] = str(SHARE_MILESTONES[0]) if SHARE_MILESTONES else "N/A"
        if intro_text_key in RESPONSE_MESSAGES and "{needed_shares}" in RESPONSE_MESSAGES[intro_text_key]:
             format_params["needed_shares"] = SHARE_MILESTONES[0] - share_count if SHARE_MILESTONES else 0

    elif next_milestone_val:
        format_params["next_milestone"] = str(next_milestone_val) 
        format_params["needed_shares"] = next_milestone_val - share_count 
    else: 
        all_milestones_claimed_check = all(str(ms_check) in user_s_data.get("claimed_share_milestones", {}) for ms_check in SHARE_MILESTONES)
        if all_milestones_claimed_check:
             format_params["next_milestone"] = RESPONSE_MESSAGES.get("all_milestones_achieved_text", "ƒê√£ ho√†n th√†nh t·∫•t c·∫£") 
             format_params["needed_shares"] = 0 
        else: 
             format_params["next_milestone"] = RESPONSE_MESSAGES.get("check_reward_button_text", "Ki·ªÉm tra ph·∫ßn th∆∞·ªüng") 
             format_params["needed_shares"] = 0 

    intro_text_template = RESPONSE_MESSAGES.get(intro_text_key, "Ch√†o m·ª´ng ƒë·∫øn Chia s·∫ª nh·∫≠n Code.")
    try:
        intro_text = intro_text_template.format(**format_params)
    except KeyError as e:
        logger.error(f"L·ªói KeyError khi format intro_text cho share_code: {e}. Params: {format_params}, Key: {intro_text_key}")
        intro_text = "L·ªói hi·ªÉn th·ªã th√¥ng tin chia s·∫ª. Vui l√≤ng th·ª≠ l·∫°i."


    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("request_code_reward_button", "üí∞ Nh·∫≠n Code th∆∞·ªüng"), callback_data='share_request_reward')],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("get_my_share_link_button", "üîó Link chia s·∫ª c·ªßa t√¥i"), callback_data='share_get_link')],
        [
            InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK), 
            InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id, 
        text=intro_text, 
        reply_markup=reply_markup, 
        parse_mode='Markdown'
    )
    return SHOW_SHARE_MENU

async def get_my_share_link_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    # Kh√¥ng x√≥a n√∫t ·ªü ƒë√¢y v√¨ tin nh·∫Øn link s·∫Ω l√† tin nh·∫Øn m·ªõi ri√™ng bi·ªát

    user_id = query.from_user.id 
    chat_id = query.message.chat_id

    global BOT_USERNAME
    if BOT_USERNAME is None: 
        try:
            bot_info = await context.bot.get_me()
            BOT_USERNAME = bot_info.username
            if BOT_USERNAME is None: 
                 await context.bot.send_message(chat_id=chat_id, text=RESPONSE_MESSAGES.get("error_getting_bot_info", "L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin bot. Vui l√≤ng th·ª≠ l·∫°i sau."))
                 return SHOW_SHARE_MENU 
            logger.info(f"T√™n bot ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i trong get_my_share_link_callback: {BOT_USERNAME}")
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ l·∫•y t√™n bot trong get_my_share_link_callback: {e}")
            await context.bot.send_message(chat_id=chat_id, text=RESPONSE_MESSAGES.get("error_getting_bot_info", "L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin bot. Vui l√≤ng th·ª≠ l·∫°i sau."))
            return SHOW_SHARE_MENU

    user_s_data = get_user_data_from_json(user_id)
    referral_code = user_s_data.get("referral_code")

    if not referral_code:
        await context.bot.send_message(chat_id=chat_id, text=RESPONSE_MESSAGES.get("error_no_referral_code", "L·ªói: Kh√¥ng t√¨m th·∫•y m√£ gi·ªõi thi·ªáu. Th·ª≠ l·∫°i /start."))
        return SHOW_SHARE_MENU

    share_link = f"https://t.me/{BOT_USERNAME}?start=ref_{referral_code}" 
    share_link_message_text = RESPONSE_MESSAGES.get("my_share_link_message", "Link c·ªßa b·∫°n: {share_link}").format(share_link=share_link)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=share_link_message_text,
        parse_mode='Markdown' 
    )
    return SHOW_SHARE_MENU


async def request_code_reward_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await _remove_buttons_from_previous_message(query) # X√≥a n√∫t tr√™n menu share code

    user_id = update.effective_user.id 
    user_data_local = get_user_data_from_json(user_id) 
    chat_id = query.message.chat_id

    current_share_count = user_data_local.get("share_count", 0)
    claimed_milestones_local = user_data_local.get("claimed_share_milestones", {})
    pending_claim_local = user_data_local.get("pending_share_milestone_claim")
    
    claimable_milestone = None
    for milestone_val in sorted(SHARE_MILESTONES):
        if current_share_count >= milestone_val and str(milestone_val) not in claimed_milestones_local:
            if not (pending_claim_local and pending_claim_local.get("milestone") == milestone_val):
                claimable_milestone = milestone_val
                break 

    message_text = ""
    keyboard_rows_for_new_message = [] # S·∫Ω build keyboard cho tin nh·∫Øn m·ªõi

    if claimable_milestone:
        context.user_data['milestone_to_claim_share'] = claimable_milestone
        ask_username_text_template = RESPONSE_MESSAGES.get("ask_username_for_share_reward", "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫°t m·ªëc **{milestone}** l∆∞·ª£t chia s·∫ª. Vui l√≤ng cung c·∫•p t√™n ƒëƒÉng nh·∫≠p game c·ªßa b·∫°n ƒë·ªÉ nh·∫≠n th∆∞·ªüng:")
        message_text = ask_username_text_template.format(milestone=claimable_milestone)
        keyboard_rows_for_new_message.append([InlineKeyboardButton(RESPONSE_MESSAGES.get("cancel_and_back_share_menu_button", "‚¨ÖÔ∏è H·ªßy & Quay l·∫°i Menu Chia S·∫ª"), callback_data='share_code_entry_point_cancel')])
        
        reply_markup_new = InlineKeyboardMarkup(keyboard_rows_for_new_message)
        await context.bot.send_message(
            chat_id=chat_id, 
            text=message_text, 
            reply_markup=reply_markup_new, 
            parse_mode='Markdown'
        )
        return AWAIT_USERNAME_FOR_SHARE_REWARD 
    
    # N·∫øu kh√¥ng c√≥ m·ªëc n√†o c√≥ th·ªÉ nh·∫≠n ngay
    elif pending_claim_local: 
        pending_milestone = pending_claim_local.get("milestone")
        message_text = RESPONSE_MESSAGES.get("pending_claim_exists", "Y√™u c·∫ßu tr∆∞·ªõc ƒëang x·ª≠ l√Ω cho m·ªëc {milestone}...").format(milestone=pending_milestone)
    else: 
        next_milestone_to_achieve = None
        needed_more_val = 0
        for m in sorted(SHARE_MILESTONES):
            if str(m) not in claimed_milestones_local: 
                if current_share_count < m:
                    next_milestone_to_achieve = m
                    needed_more_val = m - current_share_count
                    break
        
        if next_milestone_to_achieve:
            no_new_milestone_template = RESPONSE_MESSAGES.get("no_new_milestone_message", "B·∫°n c√≥ **{share_count}** l∆∞·ª£t chia s·∫ª. C·∫ßn th√™m **{needed_more}** l∆∞·ª£t n·ªØa ƒë·ªÉ ƒë·∫°t m·ªëc **{next_milestone}**. C·ªë g·∫Øng l√™n nh√©!")
            message_text = no_new_milestone_template.format(
                share_count=current_share_count, 
                needed_more=needed_more_val, 
                next_milestone=next_milestone_to_achieve
            )
        else: 
            message_text = RESPONSE_MESSAGES.get("all_milestones_claimed_message", "B·∫°n ƒë√£ nh·∫≠n th∆∞·ªüng cho t·∫•t c·∫£ c√°c m·ªëc chia s·∫ª hi·ªán c√≥! C·∫£m ∆°n s·ª± ƒë√≥ng g√≥p tuy·ªát v·ªùi c·ªßa b·∫°n.")

    # Keyboard cho c√°c tr∆∞·ªùng h·ª£p kh√¥ng chuy·ªÉn state (g·ª≠i l·∫°i menu share)
    keyboard_rows_for_new_message.append([InlineKeyboardButton(RESPONSE_MESSAGES.get("get_my_share_link_button", "üîó Link chia s·∫ª c·ªßa t√¥i"), callback_data='share_get_link')])
    # Th√™m l·∫°i n√∫t "Nh·∫≠n code th∆∞·ªüng" ƒë·ªÉ user c√≥ th·ªÉ b·∫•m l·∫°i n·∫øu mu·ªën (v√≠ d·ª• sau khi xem pending)
    keyboard_rows_for_new_message.append([InlineKeyboardButton(RESPONSE_MESSAGES.get("request_code_reward_button", "üí∞ Nh·∫≠n Code th∆∞·ªüng"), callback_data='share_request_reward')])
    keyboard_rows_for_new_message.append([
        InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK),
        InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')
    ])
    reply_markup_new = InlineKeyboardMarkup(keyboard_rows_for_new_message)
    await context.bot.send_message(
        chat_id=chat_id, 
        text=message_text, 
        reply_markup=reply_markup_new, 
        parse_mode='Markdown'
    )
    return SHOW_SHARE_MENU


async def share_code_entry_point_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if query: # H√†m n√†y ch·ªâ n√™n ƒë∆∞·ª£c g·ªçi t·ª´ callback
        logger.info(f"share_code_entry_point_cancel called by user {update.effective_user.id}")
        await query.answer()
        await _remove_buttons_from_previous_message(query) # X√≥a n√∫t tr√™n tin nh·∫Øn "Nh·∫≠p username..."

        if 'milestone_to_claim_share' in context.user_data:
            del context.user_data['milestone_to_claim_share'] 
    else:
        logger.warning("share_code_entry_point_cancel called without a callback query.")
        # N·∫øu kh√¥ng c√≥ query, th√¨ kh√¥ng th·ªÉ x√≥a n√∫t, ch·ªâ c√≥ th·ªÉ quay v·ªÅ menu share
        # b·∫±ng c√°ch g·ª≠i tin nh·∫Øn m·ªõi (share_code_entry_point s·∫Ω l√†m ƒëi·ªÅu n√†y)

    # G·ªçi l·∫°i share_code_entry_point ƒë·ªÉ hi·ªÉn th·ªã menu chia s·∫ª m·ªõi
    return await share_code_entry_point(update, context) # share_code_entry_point s·∫Ω g·ª≠i tin nh·∫Øn m·ªõi


# ==========================================================================

async def receive_username_kl001(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    customer_username = update.message.text.strip() # Plain text
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name # Plain text
    promo_code = "KL001"
    admin_response_keyboard_rows = [
        [
            InlineKeyboardButton("Sai ID", callback_data=f"admin_response:{user_id}:sai_id:{promo_code}"),
            InlineKeyboardButton("‚úÖ Th√†nh C√¥ng", callback_data=f"admin_response:{user_id}:thanh_cong:{promo_code}")
        ],
         [
            InlineKeyboardButton("Ch∆∞a LK NH", callback_data=f"admin_response:{user_id}:chua_lien_ket_ngan_hang:{promo_code}"),
            InlineKeyboardButton("Sai TT (CSKH)", callback_data=f"admin_response:{user_id}:sai_thong_tin_lien_he_cskh:{promo_code}")
        ],
        [
            InlineKeyboardButton("ƒê√£ nh·∫≠n KM001", callback_data=f"admin_response:{user_id}:kl001_da_nhan:{promo_code}"),
            InlineKeyboardButton("Tr√πng IP", callback_data=f"admin_response:{user_id}:trung_ip:{promo_code}")
        ],
        [
            InlineKeyboardButton("Ch∆∞a n·∫°p", callback_data=f"admin_response:{user_id}:chua_nap:{promo_code}"),
            InlineKeyboardButton("N·∫°p kh√¥ng ƒë·ªß", callback_data=f"admin_response:{user_id}:khong_du:{promo_code}")
        ],
        [
            InlineKeyboardButton("ƒê√£ n·∫°p nhi·ªÅu l·∫ßn", callback_data=f"admin_response:{user_id}:da_nap_nhieu:{promo_code}"),
            InlineKeyboardButton("ƒê√£ c∆∞·ª£c", callback_data=f"admin_response:{user_id}:da_cuoc:{promo_code}")
        ]
    ]
    admin_response_markup = InlineKeyboardMarkup(admin_response_keyboard_rows)
    admin_message_text_to_group = f"Y√™u c·∫ßu {promo_code}:\nKh√°ch: {user_first_name} (TG ID: {user_id})\nT√™n ƒëƒÉng nh·∫≠p: {customer_username}"
    try:
        await context.bot.send_message(
            chat_id=ID_GROUP_PROMO,
            text=admin_message_text_to_group, 
            reply_markup=admin_response_markup
        )
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn {promo_code} ƒë·∫øn nh√≥m khuy·∫øn m√£i: {e}")
        await update.message.reply_text(RESPONSE_MESSAGES.get("error_sending_request", "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."))
        return ConversationHandler.END

    customer_buttons = [[InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)], [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')]]
    customer_markup = InlineKeyboardMarkup(customer_buttons)
    # ƒê√¢y l√† reply_text, g·ª≠i tin nh·∫Øn m·ªõi. N√∫t 'back_to_menu' s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi start() ƒë√£ s·ª≠a.
    await update.message.reply_text(RESPONSE_MESSAGES.get("yeu_cau_dang_xu_ly", "Y√™u c·∫ßu ƒëang x·ª≠ l√Ω."), reply_markup=customer_markup)
    return ConversationHandler.END

async def receive_username_kl007(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    customer_username = update.message.text.strip() 
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name 
    promo_code = "KL007"
    admin_message_text_to_group = (
        f"{promo_code} Request:\n"
        f"User: {user_first_name} (TG ID: {user_id})\n"
        f"Game User: {customer_username}\n"
    )
    admin_buttons = [
        [InlineKeyboardButton("Sai ID", callback_data=f"admin_response:{user_id}:sai_id:{promo_code}")],
        [InlineKeyboardButton("Kh√¥ng c√≥ v√© c∆∞·ª£c", callback_data=f"admin_response:{user_id}:khong_co_ve_kl007:{promo_code}")],
        [InlineKeyboardButton("ƒê√£ nh·∫≠n KM007 h√¥m nay", callback_data=f"admin_response:{user_id}:kl007_da_nhan:{promo_code}")],
        [InlineKeyboardButton("C·ªông ƒëi·ªÉm (Reply s·ªë ƒëi·ªÉm)", callback_data=f"admin_response:{user_id}:kl007_reply_points_prompt:{promo_code}")]
    ]
    admin_reply_markup = InlineKeyboardMarkup(admin_buttons)
    try:
        await context.bot.send_message(
            chat_id=ID_GROUP_PROMO,
            text=admin_message_text_to_group, 
            reply_markup=admin_reply_markup
        )
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i y√™u c·∫ßu {promo_code} ƒë·∫øn nh√≥m: {e}")
        await update.message.reply_text(RESPONSE_MESSAGES.get("error_sending_request", "ƒê√£ c√≥ l·ªói x·∫£y ra khi g·ª≠i y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."))
        return ConversationHandler.END
    customer_reply_buttons = [
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')]
    ]
    customer_reply_markup = InlineKeyboardMarkup(customer_reply_buttons)
    await update.message.reply_text(RESPONSE_MESSAGES.get("yeu_cau_dang_xu_ly", "Y√™u c·∫ßu ƒëang x·ª≠ l√Ω."), reply_markup=customer_reply_markup)
    return ConversationHandler.END

async def receive_usernames_kl006(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message_text = update.message.text 
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name 
    promo_code = "KL006"
    group_size = context.user_data.get('kl006_group_size')
    if not group_size:
        await update.message.reply_text("ƒê√£ c√≥ l·ªói, kh√¥ng t√¨m th·∫•y quy m√¥ nh√≥m. Vui l√≤ng th·ª≠ l·∫°i t·ª´ ƒë·∫ßu b·∫±ng c√°ch ch·ªçn l·∫°i khuy·∫øn m√£i KL006.")
        menu_button = [[InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')]]
        await update.message.reply_text("Ch·ªçn m·ªôt t√πy ch·ªçn:", reply_markup=InlineKeyboardMarkup(menu_button))
        return ConversationHandler.END

    usernames = [u.strip() for u in re.split(r'[,\n\s]+', user_message_text) if u.strip()] 
    if len(usernames) != group_size:
        # Tin nh·∫Øn b√°o l·ªói n√†y s·∫Ω c√≥ n√∫t "Nh·∫≠p l·∫°i..." v√† "Quay l·∫°i Menu KM"
        # N√∫t "Nh·∫≠p l·∫°i..." g·ªçi kl006_reenter_usernames_after_agree_callback (ƒë√£ s·ª≠a ƒë·ªÉ g·ª≠i m·ªõi)
        # N√∫t "Quay l·∫°i Menu KM" g·ªçi khuyen_mai_callback (ƒë√£ s·ª≠a ƒë·ªÉ g·ª≠i m·ªõi)
        customer_buttons = [
             [InlineKeyboardButton(f"‚úçÔ∏è Nh·∫≠p l·∫°i {group_size} t√™n", callback_data=f'kl006_reenter_usernames_after_agree:{group_size}')],
            [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')],
            [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
        ]
        customer_markup = InlineKeyboardMarkup(customer_buttons)
        invalid_count_text = RESPONSE_MESSAGES.get("kl006_invalid_username_count", "S·ªë l∆∞·ª£ng t√™n ({submitted_count}) kh√¥ng kh·ªõp ({expected_count}).")
        await update.message.reply_text(
            invalid_count_text.format(submitted_count=len(usernames), expected_count=group_size),
            reply_markup=customer_markup
        )
        return RECEIVE_USERNAMES_KL006

    usernames_formatted = "\n".join([f"- {name}" for name in usernames]) 
    admin_message_text_to_group = (
        f"Y√™u c·∫ßu {promo_code} - Nh√≥m {group_size} th√†nh vi√™n:\n"
        f"Kh√°ch: {user_first_name} (TG ID: {user_id})\n"
        f"T√™n ƒëƒÉng nh·∫≠p cung c·∫•p:\n{usernames_formatted}"
    )
    admin_buttons = []
    for idx, uname in enumerate(usernames):
        admin_buttons.append([
            InlineKeyboardButton(f"Sai ID: {uname}", callback_data=f"admin_kl006:{user_id}:{group_size}:{idx}:sai_id_user"),
            InlineKeyboardButton(f"C∆∞·ª£c <3k: {uname}", callback_data=f"admin_kl006:{user_id}:{group_size}:{idx}:cuoc_khong_du_user")
        ])
    admin_buttons.append([InlineKeyboardButton("T·ªïng c∆∞·ª£c nh√≥m <20k", callback_data=f"admin_kl006:{user_id}:{group_size}:GROUP:khong_du_tong_diem")])
    admin_buttons.append([InlineKeyboardButton("Nh√≥m ch∆∞a ƒêK KM006", callback_data=f"admin_kl006:{user_id}:{group_size}:GROUP:nhom_chua_dk")])
    admin_buttons.append([InlineKeyboardButton("Nh√≥m ƒë√£ nh·∫≠n KM006 h.nay", callback_data=f"admin_kl006:{user_id}:{group_size}:GROUP:da_nhan")])
    admin_buttons.append([InlineKeyboardButton("‚úÖ Th√†nh C√¥ng (KL006)", callback_data=f"admin_kl006:{user_id}:{group_size}:GROUP:thanh_cong")])
    admin_reply_markup = InlineKeyboardMarkup(admin_buttons)
    try:
        await context.bot.send_message(
            chat_id=ID_GROUP_PROMO,
            text=admin_message_text_to_group, 
            reply_markup=admin_reply_markup
        )
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i y√™u c·∫ßu {promo_code} ƒë·∫øn nh√≥m: {e}")
        await update.message.reply_text(RESPONSE_MESSAGES.get("error_sending_request", "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."))
        return ConversationHandler.END
    customer_buttons = [[InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)], [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')]]
    customer_markup = InlineKeyboardMarkup(customer_buttons)
    await update.message.reply_text(RESPONSE_MESSAGES.get("yeu_cau_dang_xu_ly", "Y√™u c·∫ßu ƒëang x·ª≠ l√Ω."), reply_markup=customer_markup)
    if 'kl006_group_size' in context.user_data: del context.user_data['kl006_group_size']
    return ConversationHandler.END

async def receive_username_app_promo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    customer_username = update.message.text.strip() 
    context.user_data['app_promo_username'] = customer_username
    # Tin nh·∫Øn n√†y ("C√≥ ·∫£nh x√°c nh·∫≠n kh√¥ng?") l√† reply_text, g·ª≠i m·ªõi.
    # N√∫t b·∫•m tr√™n ƒë√≥ ("C√≥ ·∫£nh"/"Kh√¥ng c√≥ ·∫£nh") s·∫Ω g·ªçi handle_image_confirm_app_promo
    # handle_image_confirm_app_promo ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªÉ x√≥a n√∫t v√† g·ª≠i m·ªõi.
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ C√≥ ·∫£nh", callback_data='app_promo_has_image:yes'),
            InlineKeyboardButton("‚ùå Kh√¥ng c√≥ ·∫£nh", callback_data='app_promo_has_image:no')
        ],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_promo_menu_button_text", "‚¨ÖÔ∏è Quay l·∫°i Menu KM"), callback_data='khuyen_mai')], # G·ªçi khuyen_mai_callback (ƒë√£ s·ª≠a)
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(RESPONSE_MESSAGES.get("app_promo_ask_image", "C√≥ ·∫£nh x√°c nh·∫≠n kh√¥ng?"), reply_markup=reply_markup)
    return AWAIT_IMAGE_CONFIRM_APP_PROMO

async def receive_image_app_promo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name 
    customer_username = context.user_data.get('app_promo_username', 'N/A') 
    promo_code = "APP_PROMO"
    if not message.photo:
        # Tin nh·∫Øn n√†y c≈©ng l√† reply_text (m·ªõi)
        await message.reply_text("Vui l√≤ng g·ª≠i m·ªôt h√¨nh ·∫£nh. N·∫øu kh√¥ng c√≥ h√¨nh ·∫£nh, b·∫°n c√≥ th·ªÉ quay l·∫°i v√† ch·ªçn 'Kh√¥ng c√≥ ·∫£nh'.")
        return RECEIVE_IMAGE_APP_PROMO

    photo_file_id = message.photo[-1].file_id
    admin_caption_text = (
        f"Y√™u c·∫ßu {promo_code} (C√≥ ·∫£nh):\n"
        f"Kh√°ch: {user_first_name} (TG ID: {user_id})\n"
        f"T√™n ƒëƒÉng nh·∫≠p: {customer_username}"
    )
    admin_buttons = [
        [
            InlineKeyboardButton("Sai ID", callback_data=f"admin_response:{user_id}:sai_id:{promo_code}"),
            InlineKeyboardButton("‚úÖ Th√†nh C√¥ng", callback_data=f"admin_response:{user_id}:app_promo_thanh_cong:{promo_code}")
        ],
        [
            InlineKeyboardButton("ƒê√£ nh·∫≠n KM T·∫£i App", callback_data=f"admin_response:{user_id}:app_promo_da_nhan:{promo_code}"),
            InlineKeyboardButton("Y/c h√¨nh ·∫£nh", callback_data=f"admin_response:{user_id}:app_promo_yeu_cau_hinh_anh:{promo_code}")
        ],
        [
            InlineKeyboardButton("Tr√πng IP (App)", callback_data=f"admin_response:{user_id}:app_promo_trung_ip:{promo_code}"),
            InlineKeyboardButton("ƒê√£ n·∫°p/r√∫t (App)", callback_data=f"admin_response:{user_id}:app_promo_da_nap_rut_nhieu:{promo_code}")
        ],
        [
            InlineKeyboardButton("Ch∆∞a LK NH", callback_data=f"admin_response:{user_id}:chua_lien_ket_ngan_hang:{promo_code}"),
            InlineKeyboardButton("Sai TT (CSKH)", callback_data=f"admin_response:{user_id}:sai_thong_tin_lien_he_cskh:{promo_code}")
        ]
    ]
    admin_reply_markup = InlineKeyboardMarkup(admin_buttons)
    try:
        await context.bot.send_photo(
            chat_id=ID_GROUP_PROMO,
            photo=photo_file_id,
            caption=admin_caption_text, 
            reply_markup=admin_reply_markup
        )
        customer_buttons = [[InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)], [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')]]
        customer_markup = InlineKeyboardMarkup(customer_buttons)
        await update.message.reply_text(RESPONSE_MESSAGES.get("app_promo_image_sent_to_admin", "ƒê√£ g·ª≠i ·∫£nh."), reply_markup=customer_markup)
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i y√™u c·∫ßu {promo_code} (c√≥ ·∫£nh) ƒë·∫øn nh√≥m: {e}")
        await update.message.reply_text(RESPONSE_MESSAGES.get("error_sending_request", "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."))
    if 'app_promo_username' in context.user_data: del context.user_data['app_promo_username']
    return ConversationHandler.END

# H√†m handle_admin_response v√† c√°c h√†m handle_admin_kl00X_response
# g·ª≠i tin nh·∫Øn m·ªõi cho kh√°ch h√†ng, n√™n c√°c n√∫t tr√™n ƒë√≥ (v√≠ d·ª• back_to_menu)
# s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi `start()` ƒë√£ s·ª≠a (x√≥a n√∫t c≈©, g·ª≠i menu welcome m·ªõi).
# Kh√¥ng c·∫ßn thay ƒë·ªïi l·ªõn ·ªü ƒë√¢y. Ch·ªâ c·∫ßn ƒë·∫£m b·∫£o `parse_mode='Markdown'` ƒë∆∞·ª£c d√πng ƒë√∫ng ch·ªó.

async def handle_admin_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    original_bot_message_text = query.message.text if query.message.text else query.message.caption
    if not original_bot_message_text:
        logger.error(f"L·ªói: Kh√¥ng th·ªÉ l·∫•y n·ªôi dung tin nh·∫Øn admin g·ªëc. Callback data: {query.data}")
        # Kh√¥ng g·ª≠i g√¨ cho user, ch·ªâ edit tin nh·∫Øn admin
        try:
            await query.edit_message_text("L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu do thi·∫øu n·ªôi dung tin nh·∫Øn g·ªëc c·ªßa admin.", reply_markup=None)
        except Exception as e:
            logger.error(f"Error editing admin message in handle_admin_response (no original text): {e}")
        return

    customer_username = "N/A_PARSE_ERR"
    username_match_login = re.search(r"T√™n ƒëƒÉng nh·∫≠p: (\S+)", original_bot_message_text, re.IGNORECASE)
    if username_match_login:
        customer_username = username_match_login.group(1)
    else:
        username_match_game = re.search(r"Game User: (\S+)", original_bot_message_text, re.IGNORECASE)
        if username_match_game:
            customer_username = username_match_game.group(1)

    try:
        _prefix, user_id_str, response_key, promo_code = query.data.split(':', 3)
        if response_key == "kl007_reply_points_prompt":
            # Edit tin nh·∫Øn admin ƒë·ªÉ y√™u c·∫ßu reply (ƒë√£ c√≥ escape markdown)
            escaped_original_text = escape_markdown(original_bot_message_text, version=1)
            escaped_customer_username = escape_markdown(customer_username, version=1)
            await query.edit_message_text(
                f"{escaped_original_text}\n---\n‚ÑπÔ∏è Admin, vui l√≤ng reply (tr·∫£ l·ªùi) tr·ª±c ti·∫øp v√†o tin nh·∫Øn n√†y v·ªõi s·ªë ƒëi·ªÉm c·∫ßn c·ªông cho user {escaped_customer_username} (TG ID: {user_id_str}). V√≠ d·ª•: +100 ho·∫∑c 100.", 
                reply_markup=None,
                parse_mode='Markdown' # V√¨ text ƒë√£ ƒë∆∞·ª£c escape
            )
            return
    except ValueError:
        logger.error(f"L·ªói parsing callback_data (chung): {query.data}")
        await query.edit_message_text(f"L·ªói callback data: {query.data}. Vui l√≤ng b√°o admin.", reply_markup=None)
        return

    target_user_id = int(user_id_str)
    admin_user = query.from_user
    admin_mention = f"@{admin_user.username}" if admin_user.username else admin_user.first_name
    customer_response_markup = None
    response_message_to_customer = None
    
    # Tin nh·∫Øn admin ƒë√£ ƒë∆∞·ª£c escape tr∆∞·ªõc ƒë√≥
    escaped_original_text_admin = escape_markdown(original_bot_message_text, version=1)
    escaped_admin_mention_admin = escape_markdown(admin_mention, version=1)
    escaped_customer_username_admin = escape_markdown(customer_username, version=1)
    escaped_response_reason_admin = escape_markdown(response_key.replace('_', ' ').title(), version=1)

    processed_text_for_admin = (f"{escaped_original_text_admin}\n---\n"
                                f"‚úÖ X·ª≠ l√Ω b·ªüi {escaped_admin_mention_admin} cho User: {escaped_customer_username_admin} (ID: {target_user_id}), L√Ω do: {escaped_response_reason_admin}")


    if response_key == "app_promo_yeu_cau_hinh_anh":
        response_message_to_customer = RESPONSE_MESSAGES.get("app_promo_yeu_cau_hinh_anh")
        # N√∫t "ƒêƒÉng k√Ω l·∫°i KM T·∫£i App" s·∫Ω g·ªçi promo_app_experience_callback (ƒë√£ s·ª≠a ƒë·ªÉ g·ª≠i m·ªõi)
        customer_resend_image_button_rows = [
            [InlineKeyboardButton("üéÅ ƒêƒÉng k√Ω l·∫°i KM T·∫£i App (k√®m ·∫£nh)", callback_data='promo_app_experience')],
            [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)],
            [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')]
        ]
        customer_response_markup = InlineKeyboardMarkup(customer_resend_image_button_rows)
    else:
        response_message_template = RESPONSE_MESSAGES.get(response_key)
        if not response_message_template:
            response_message_to_customer = "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ ph·∫£n h·ªìi c·ªßa qu·∫£n tr·ªã vi√™n. Vui l√≤ng li√™n h·ªá CSKH."
            logger.warning(f"Kh√¥ng t√¨m th·∫•y response_key: {response_key} cho promo {promo_code}")
        else:
            try:
                current_format_params_for_customer = {}
                # C√°c gi√° tr·ªã n√†y c·∫ßn ƒë∆∞·ª£c escape n·∫øu tin nh·∫Øn t·ªõi user l√† Markdown v√† ch√∫ng ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát
                if "{customer_username}" in response_message_template:
                    current_format_params_for_customer["customer_username"] = escape_markdown(customer_username, version=1)
                if "{promo_code}" in response_message_template: # promo_code th∆∞·ªùng an to√†n (KL001, etc)
                    current_format_params_for_customer["promo_code"] = promo_code
                if "{YESTERDAY_DMY}" in response_message_template: # YESTERDAY_DMY l√† ng√†y, an to√†n
                    current_format_params_for_customer["YESTERDAY_DMY"] = YESTERDAY_DMY
                response_message_to_customer = response_message_template.format(**current_format_params_for_customer)
            except KeyError as e:
                logger.error(f"L·ªói KeyError khi format tin nh·∫Øn cho kh√°ch ({response_key}): {e}. D√πng template g·ªëc.")
                response_message_to_customer = response_message_template 

        customer_response_keyboard_rows = []
        re_entry_callback_data = None
        re_entry_text = None

        # N√∫t "ƒêƒÉng k√Ω l·∫°i KM" s·∫Ω g·ªçi c√°c h√†m promo_X_callback (ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªÉ g·ª≠i m·ªõi)
        if promo_code == "KL001" and response_key in ["sai_id", "chua_lien_ket_ngan_hang", "sai_thong_tin_lien_he_cskh", "kl001_da_nhan", "trung_ip", "chua_nap", "khong_du", "da_nap_nhieu", "da_cuoc"]:
            re_entry_text = f"‚úçÔ∏è ƒêƒÉng k√Ω l·∫°i KM {promo_code}"
            re_entry_callback_data = f"promo_{promo_code}" # S·∫Ω g·ªçi promo_KL001_callback
        elif promo_code == "KL007" and response_key in ["sai_id", "khong_co_ve_kl007", "kl007_da_nhan"]:
            re_entry_text = f"‚úçÔ∏è ƒêƒÉng k√Ω l·∫°i KM {promo_code}"
            re_entry_callback_data = f"promo_{promo_code}" # S·∫Ω g·ªçi promo_KL007_callback
        elif promo_code == "APP_PROMO" and response_key in ["sai_id", "app_promo_da_nhan", "app_promo_trung_ip", "app_promo_da_nap_rut_nhieu", "chua_lien_ket_ngan_hang", "sai_thong_tin_lien_he_cskh"]:
            re_entry_text = "‚úçÔ∏è ƒêƒÉng k√Ω l·∫°i KM T·∫£i App"
            re_entry_callback_data = 'promo_app_experience' # S·∫Ω g·ªçi promo_app_experience_callback

        if re_entry_text and re_entry_callback_data:
            customer_response_keyboard_rows.append(
                [InlineKeyboardButton(re_entry_text, callback_data=re_entry_callback_data)]
            )
        common_buttons_row = [
            InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK),
            InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu') # G·ªçi back_to_menu_handler (ƒë√£ s·ª≠a)
        ]
        customer_response_keyboard_rows.append(common_buttons_row)
        if customer_response_keyboard_rows:
            customer_response_markup = InlineKeyboardMarkup(customer_response_keyboard_rows)

    try:
        if response_message_to_customer:
            await context.bot.send_message(
                chat_id=target_user_id,
                text=response_message_to_customer,
                reply_markup=customer_response_markup,
                parse_mode='Markdown' # V√¨ response_message_to_customer c√≥ th·ªÉ ch·ª©a Markdown
            )
        
        # Edit tin nh·∫Øn admin group (ƒë√£ escape)
        if query.message.text is not None:
            await query.edit_message_text(text=processed_text_for_admin, reply_markup=None, parse_mode='Markdown')
        elif query.message.caption is not None: 
            await query.edit_message_caption(caption=processed_text_for_admin, reply_markup=None, parse_mode='Markdown')
        else: # N·∫øu kh√¥ng c√≥ text v√† caption, ch·ªâ x√≥a n√∫t
             await query.edit_message_reply_markup(reply_markup=None)

    except telegram.error.BadRequest as e_edit:
        if any(err_msg in str(e_edit).lower() for err_msg in ["message to edit not found", "message is not modified", "there is no text in the message to edit", "message can't be edited"]):
            logger.warning(f"Kh√¥ng th·ªÉ s·ª≠a tin nh·∫Øn admin (chung - l·ªói ƒë√£ bi·∫øt): {e_edit}")
            try: await query.edit_message_reply_markup(reply_markup=None) 
            except Exception as e_markup: logger.warning(f"C≈©ng kh√¥ng th·ªÉ x√≥a markup (chung): {e_markup}")
        else: 
            logger.error(f"L·ªói l·∫° khi s·ª≠a tin nh·∫Øn admin (chung): {e_edit} - Data: {query.data} - Processed Text: '{processed_text_for_admin}'")
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i ph·∫£n h·ªìi (chung) ho·∫∑c x·ª≠ l√Ω tin nh·∫Øn admin: {e}")

async def handle_admin_kl007_point_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message 
    replied_to_message = message.reply_to_message 
    if not (replied_to_message and replied_to_message.from_user.is_bot and replied_to_message.from_user.id == context.bot.id and message.chat_id == ID_GROUP_PROMO):
        return

    original_bot_text = replied_to_message.text 
    if not original_bot_text or "KL007 Request:" not in original_bot_text:
        return 

    admin_reply_text = message.text.strip() 
    admin_user = message.from_user
    admin_mention = f"@{admin_user.username}" if admin_user.username else admin_user.first_name 

    tg_id_match = re.search(r"TG ID: (\d+)", original_bot_text)
    game_user_match = re.search(r"Game User: (\S+)", original_bot_text, re.IGNORECASE)

    if not (tg_id_match and game_user_match):
        logger.warning("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t TG ID ho·∫∑c Game User t·ª´ tin nh·∫Øn KL007 g·ªëc khi admin reply ƒëi·ªÉm.")
        await message.reply_text("L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin user trong tin nh·∫Øn g·ªëc ƒë·ªÉ c·ªông ƒëi·ªÉm KL007.")
        return

    target_user_id = int(tg_id_match.group(1))
    customer_username = game_user_match.group(1) 
    points_to_add = None

    if admin_reply_text.startswith('+') and admin_reply_text[1:].isdigit():
        points_to_add = int(admin_reply_text[1:])
    elif admin_reply_text.isdigit():
        points_to_add = int(admin_reply_text)

    if points_to_add is not None and points_to_add > 0 :
        success_message_template = RESPONSE_MESSAGES.get("thanh_cong_kl007_points", "...")
        escaped_customer_username_for_customer = escape_markdown(customer_username, version=1)
        message_to_customer = success_message_template.format(points=points_to_add, customer_username=escaped_customer_username_for_customer)

        customer_buttons = [[InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)], [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')]]
        customer_markup = InlineKeyboardMarkup(customer_buttons)
        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text=message_to_customer,
                reply_markup=customer_markup
                # parse_mode='Markdown' # Th√™m n·∫øu template c√≥ Markdown, hi·ªán t·∫°i kh√¥ng c·∫ßn v√¨ ƒë√£ escape
            )

            escaped_original_bot_text = escape_markdown(original_bot_text, version=1)
            escaped_admin_mention_for_admin = escape_markdown(admin_mention, version=1)
            escaped_customer_username_for_admin = escape_markdown(customer_username, version=1)

            new_admin_text_processed = (
                f"{escaped_original_bot_text}\n--------------------\n"
                f"‚úÖ ƒê√É X·ª¨ L√ù b·ªüi {escaped_admin_mention_for_admin}: C·ªông {points_to_add} ƒëi·ªÉm cho {escaped_customer_username_for_admin}."
            )
            await context.bot.edit_message_text(
                text=new_admin_text_processed,
                chat_id=ID_GROUP_PROMO,
                message_id=replied_to_message.message_id,
                reply_markup=None,
                parse_mode='Markdown' 
            )
            await message.reply_text(f"ƒê√£ th√¥ng b√°o c·ªông {points_to_add} ƒëi·ªÉm KL007 cho user {customer_username} (TG ID: {target_user_id}).")
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn c·ªông ƒëi·ªÉm KL007 cho kh√°ch ho·∫∑c s·ª≠a tin nh·∫Øn admin: {e}")
            await message.reply_text(f"L·ªói khi x·ª≠ l√Ω c·ªông ƒëi·ªÉm KL007 cho {customer_username}: {e}")
    else: 
        if not admin_reply_text.startswith("admin_response:"): 
            logger.info(f"Admin {admin_mention} ƒë√£ reply b·∫±ng vƒÉn b·∫£n kh√¥ng h·ª£p l·ªá ('{admin_reply_text}') cho y√™u c·∫ßu KL007 c·ªßa {customer_username}. Bot kh√¥ng x·ª≠ l√Ω.")

async def handle_admin_kl006_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    original_bot_message_text = query.message.text if query.message.text else query.message.caption 
    if not original_bot_message_text:
        logger.error(f"L·ªói: Kh√¥ng th·ªÉ l·∫•y n·ªôi dung tin nh·∫Øn admin g·ªëc cho KL006. Callback data: {query.data}")
        await query.edit_message_text("L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu KL006 do thi·∫øu n·ªôi dung tin nh·∫Øn g·ªëc.", reply_markup=None)
        return

    parsed_usernames_from_message = []
    usernames_block_match = re.search(r"T√™n ƒëƒÉng nh·∫≠p cung c·∫•p:\s*\n((?:- \S+\s*(?:\n|$))+)", original_bot_message_text, re.MULTILINE | re.IGNORECASE)
    if usernames_block_match:
        parsed_usernames_from_message = [name.strip() for name in re.findall(r"-\s*(\S+)", usernames_block_match.group(1))] 

    try:
        _prefix, user_id_str, group_size_str, affected_item_specifier, response_key_suffix = query.data.split(':', 4)
        response_key = f"kl006_{response_key_suffix}"
    except ValueError:
        logger.error(f"L·ªói parsing callback_data (KL006): {query.data}")
        await query.edit_message_text(f"L·ªói callback data KL006: {query.data}. Vui l√≤ng b√°o admin.", reply_markup=None)
        return

    target_user_id = int(user_id_str)
    group_size_from_callback = int(group_size_str)
    admin_user = query.from_user
    admin_mention = f"@{admin_user.username}" if admin_user.username else admin_user.first_name 
    affected_username_for_message = "m·ªôt th√†nh vi√™n trong nh√≥m" 
    action_taken_detail = response_key_suffix.replace('_', ' ').title() 

    if affected_item_specifier != "GROUP":
        try:
            user_idx = int(affected_item_specifier)
            if 0 <= user_idx < len(parsed_usernames_from_message):
                affected_username_for_message = parsed_usernames_from_message[user_idx] 
                action_taken_detail += f" (User: {affected_username_for_message})"
            else:
                action_taken_detail += f" (User Index {user_idx} - L·ªói kh√¥ng t√¨m th·∫•y trong list)"
                logger.warning(f"KL006 Admin Response: User index {user_idx} out of bounds for parsed_usernames ({len(parsed_usernames_from_message)}): {parsed_usernames_from_message}")
        except ValueError:
            action_taken_detail += f" (Item: {affected_item_specifier} - L·ªói ID item)"
            logger.warning(f"KL006 Admin Response: Invalid affected_item_specifier {affected_item_specifier}")

    escaped_original_text_kl006 = escape_markdown(original_bot_message_text, version=1)
    escaped_admin_mention_kl006 = escape_markdown(admin_mention, version=1)
    escaped_action_taken_detail_for_admin = escape_markdown(action_taken_detail, version=1)
    processed_text_for_admin_kl006 = f"{escaped_original_text_kl006}\n---\n‚úÖ X·ª≠ l√Ω b·ªüi {escaped_admin_mention_kl006}: {escaped_action_taken_detail_for_admin}"

    response_message_template = RESPONSE_MESSAGES.get(response_key)
    response_message_to_customer = f"Ph·∫£n h·ªìi cho y√™u c·∫ßu KL006 c·ªßa b·∫°n: {action_taken_detail} (l·ªói template: {response_key})" 

    if response_message_template:
        format_params_for_customer_kl006 = {}
        if "{date}" in response_message_template: 
             format_params_for_customer_kl006["date"] = YESTERDAY_DMY 
        if "{username}" in response_message_template :
            format_params_for_customer_kl006["username"] = escape_markdown(affected_username_for_message, version=1)
        if "{group_size}" in response_message_template:
            format_params_for_customer_kl006["group_size"] = group_size_from_callback 
        try:
            response_message_to_customer = response_message_template.format(**format_params_for_customer_kl006)
        except KeyError as e:
            logger.error(f"L·ªói format KL006, key: {e}, template: '{response_message_template}', params: {format_params_for_customer_kl006}")
            if "{username}" in format_params_for_customer_kl006: 
                format_params_for_customer_kl006["username"] = affected_username_for_message 
                try:
                    response_message_to_customer = response_message_template.format(**format_params_for_customer_kl006)
                except: response_message_to_customer = response_message_template 
            else: response_message_to_customer = response_message_template
    else:
         logger.warning(f"Kh√¥ng t√¨m th·∫•y template cho response_key KL006: {response_key}")

    customer_response_keyboard_rows = []
    if response_key_suffix in ["sai_id_user", "cuoc_khong_du_user", "khong_du_tong_diem", "nhom_chua_dk", "da_nhan", "thanh_cong"]:
        customer_response_keyboard_rows.append(
            [InlineKeyboardButton(f"‚úçÔ∏è ƒêƒÉng k√Ω l·∫°i KM KL006", callback_data=f'promo_KL006')] # G·ªçi promo_KL006_callback (ƒë√£ s·ª≠a)
        )
    common_buttons_row_kl006 = [
        InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK),
        InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu') # G·ªçi back_to_menu_handler (ƒë√£ s·ª≠a)
    ]
    customer_response_keyboard_rows.append(common_buttons_row_kl006)
    customer_response_markup = InlineKeyboardMarkup(customer_response_keyboard_rows)

    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=response_message_to_customer,
            reply_markup=customer_response_markup,
            parse_mode='Markdown'
        )
        if query.message.text is not None:
            await query.edit_message_text(text=processed_text_for_admin_kl006, reply_markup=None, parse_mode='Markdown')
        elif query.message.caption is not None:
            await query.edit_message_caption(caption=processed_text_for_admin_kl006, reply_markup=None, parse_mode='Markdown')
        else: await query.edit_message_reply_markup(reply_markup=None) 

    except telegram.error.BadRequest as e_edit:
        if any(err_msg in str(e_edit).lower() for err_msg in ["message to edit not found", "message is not modified", "there is no text in the message to edit", "message can't be edited"]):
            logger.warning(f"Kh√¥ng th·ªÉ s·ª≠a tin nh·∫Øn admin (KL006 - l·ªói ƒë√£ bi·∫øt): {e_edit}")
            try: await query.edit_message_reply_markup(reply_markup=None)
            except Exception as e_markup: logger.warning(f"C≈©ng kh√¥ng th·ªÉ x√≥a markup (KL006): {e_markup}")
        else: logger.error(f"L·ªói l·∫° khi s·ª≠a tin nh·∫Øn admin (KL006): {e_edit} - Data: {query.data} - Processed Text: '{processed_text_for_admin_kl006}'")
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i ph·∫£n h·ªìi KL006 ho·∫∑c x·ª≠ l√Ω tin nh·∫Øn admin: {e}")

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    escaped_chat_id = escape_markdown(str(chat_id), version=2) 
    await update.message.reply_text(f"ID c·ªßa nh√≥m chat n√†y l√†: `{escaped_chat_id}`", parse_mode='MarkdownV2')

async def receive_username_for_share_reward(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    game_username = update.message.text.strip() 
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name 
    milestone_to_claim = context.user_data.get('milestone_to_claim_share')

    if not milestone_to_claim:
        # Tin nh·∫Øn n√†y l√† reply_text (m·ªõi)
        await update.message.reply_text(RESPONSE_MESSAGES.get("error_no_milestone_info", "L·ªói kh√¥ng t√¨m th·∫•y m·ªëc th∆∞·ªüng. Th·ª≠ l·∫°i."))
        # N√∫t "Menu Chia S·∫ª" g·ªçi share_code_entry_point (ƒë√£ s·ª≠a ƒë·ªÉ g·ª≠i m·ªõi)
        share_menu_button = InlineKeyboardMarkup([[InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_share_menu_button", "‚¨ÖÔ∏è Menu Chia S·∫ª"), callback_data='share_code_entry_point')]])
        await update.message.reply_text(RESPONSE_MESSAGES.get("return_to_share_menu_prompt","Vui l√≤ng quay l·∫°i menu Chia s·∫ª:"), reply_markup=share_menu_button)
        return AWAIT_USERNAME_FOR_SHARE_REWARD # User c·∫ßn b·∫•m n√∫t ƒë·ªÉ quay l·∫°i

    admin_text = RESPONSE_MESSAGES.get("share_admin_request_text", "Y/c th∆∞·ªüng chia s·∫ª: Kh√°ch {user_first_name} (ID {user_id}), GameUser {game_username}, M·ªëc {milestone}").format(
        user_first_name=user_first_name, user_id=user_id, game_username=game_username, milestone=milestone_to_claim
    )
    admin_keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("Sai ID", callback_data=f"admin_share_resp:{user_id}:{milestone_to_claim}:sai_id"),
            InlineKeyboardButton("‚úÖ Th√†nh C√¥ng", callback_data=f"admin_share_resp:{user_id}:{milestone_to_claim}:thanh_cong")
        ],
        [InlineKeyboardButton("üí¨ Li√™n h·ªá CSKH", callback_data=f"admin_share_resp:{user_id}:{milestone_to_claim}:cskh")]
    ])

    try:
        sent_admin_message = await context.bot.send_message(chat_id=ID_GROUP_PROMO, text=admin_text, reply_markup=admin_keyboard) 
        pending_claim_data = {
            "milestone": milestone_to_claim, "game_username": game_username,
            "admin_message_id": sent_admin_message.message_id,
            "submission_time": datetime.datetime.now(pytz.utc).isoformat()
        }
        bot_data_loaded = load_bot_data()
        user_id_str = str(user_id)
        if user_id_str not in bot_data_loaded["users"]: get_user_data_from_json(user_id); bot_data_loaded = load_bot_data() 
        bot_data_loaded["users"][user_id_str]["pending_share_milestone_claim"] = pending_claim_data
        save_bot_data(bot_data_loaded)
        
        message_to_user_template = RESPONSE_MESSAGES.get("share_reward_request_sent", "ƒê√£ g·ª≠i y/c cho m·ªëc {milestone} v·ªõi t√™n {game_username}.")
        message_to_user = message_to_user_template.format(milestone=milestone_to_claim, game_username=escape_markdown(game_username, version=1))

        main_menu_button = InlineKeyboardMarkup([[InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')]])
        await update.message.reply_text(message_to_user, reply_markup=main_menu_button, parse_mode='Markdown') # ƒê√£ l√† reply_text (m·ªõi)

    except Exception as e:
        logger.error(f"L·ªói g·ª≠i y/c th∆∞·ªüng chia s·∫ª ƒë·∫øn admin: {e}")
        await update.message.reply_text(RESPONSE_MESSAGES.get("error_sending_to_admin", "L·ªói g·ª≠i y√™u c·∫ßu ƒë·∫øn admin. Th·ª≠ l·∫°i sau."))

    if 'milestone_to_claim_share' in context.user_data: del context.user_data['milestone_to_claim_share']
    return ConversationHandler.END 

async def handle_admin_share_code_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    try:
        _prefix, target_user_id_str, milestone_str, action = query.data.split(':')
        target_user_id = int(target_user_id_str); milestone_val = int(milestone_str)
    except ValueError:
        logger.error(f"L·ªói parse callback data admin_share_resp: {query.data}")
        await query.edit_message_text(f"L·ªói callback data: {query.data}. Kh√¥ng th·ªÉ x·ª≠ l√Ω.", reply_markup=None)
        return

    admin_user = query.from_user
    admin_mention = f"@{admin_user.username}" if admin_user.username else admin_user.first_name 
    bot_data_all = load_bot_data()
    target_user_s_data_json = bot_data_all["users"].get(str(target_user_id))

    if not target_user_s_data_json:
        logger.warning(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng {target_user_id} cho admin_share_resp.")
        await query.edit_message_text(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng {target_user_id}. Y√™u c·∫ßu c√≥ th·ªÉ ƒë√£ c≈© ho·∫∑c l·ªói.", reply_markup=None)
        return

    pending_claim_json = target_user_s_data_json.get("pending_share_milestone_claim")
    original_admin_message_text = query.message.text if query.message.text else "" # L·∫•y text g·ªëc, n·∫øu l√† caption th√¨ s·∫Ω kh√¥ng c√≥ ·ªü ƒë√¢y.
    
    if not pending_claim_json or pending_claim_json.get("milestone") != milestone_val:
        if str(milestone_val) in target_user_s_data_json.get("claimed_share_milestones", {}):
             escaped_original_admin_text = escape_markdown(original_admin_message_text, version=1)
             processed_text_already = f"{escaped_original_admin_text}\n---\n‚ö†Ô∏è Y√™u c·∫ßu n√†y cho m·ªëc {milestone_val} d∆∞·ªùng nh∆∞ ƒë√£ ƒë∆∞·ª£c duy·ªát tr∆∞·ªõc ƒë√≥."
             await query.edit_message_text(text=processed_text_already, reply_markup=None, parse_mode='Markdown')
        else: 
            await query.edit_message_text(f"Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ƒëang ch·ªù x·ª≠ l√Ω cho user {target_user_id} m·ªëc {milestone_val}, ho·∫∑c th√¥ng tin kh√¥ng kh·ªõp.", reply_markup=None)
        return

    game_username_from_json = pending_claim_json.get("game_username", "N/A") 
    user_message_text = "";
    
    escaped_original_admin_text_share = escape_markdown(original_admin_message_text, version=1) 
    escaped_admin_mention_share = escape_markdown(admin_mention, version=1)
    escaped_game_username_for_admin_share = escape_markdown(game_username_from_json, version=1)
    admin_processed_text_share = f"{escaped_original_admin_text_share}\n---\n"

    if action == "thanh_cong":
        if "claimed_share_milestones" not in bot_data_all["users"][str(target_user_id)]:
            bot_data_all["users"][str(target_user_id)]["claimed_share_milestones"] = {}
        bot_data_all["users"][str(target_user_id)]["claimed_share_milestones"][str(milestone_val)] = datetime.datetime.now(pytz.utc).isoformat()
        
        user_message_text = RESPONSE_MESSAGES.get("share_reward_approved", "...").format(milestone=milestone_val, game_username=escape_markdown(game_username_from_json, version=1))
        admin_processed_text_share += f"‚úÖ ƒê√£ duy·ªát b·ªüi {escaped_admin_mention_share} cho m·ªëc {milestone_val} (User: {escaped_game_username_for_admin_share})."
    elif action == "sai_id":
        user_message_text = RESPONSE_MESSAGES.get("share_reward_sai_id", "...").format(milestone=milestone_val) 
        admin_processed_text_share += f"üö´ ID Kh√¥ng ƒê√∫ng - X·ª≠ l√Ω b·ªüi {escaped_admin_mention_share} (User: {escaped_game_username_for_admin_share})."
    elif action == "cskh":
        user_message_text = RESPONSE_MESSAGES.get("share_reward_contact_cskh", "...").format(milestone=milestone_val) 
        admin_processed_text_share += f"‚ÑπÔ∏è Y√™u c·∫ßu CSKH - X·ª≠ l√Ω b·ªüi {escaped_admin_mention_share} (User: {escaped_game_username_for_admin_share})."

    bot_data_all["users"][str(target_user_id)]["pending_share_milestone_claim"] = None 
    save_bot_data(bot_data_all)
    customer_buttons_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("cskh_button_text","üí¨ CSKH tr·ª±c tuy·∫øn"), url=CSKH_LINK)],
        [InlineKeyboardButton(RESPONSE_MESSAGES.get("back_to_menu_button","‚¨ÖÔ∏è Quay l·∫°i Menu"), callback_data='back_to_menu')]
    ])
    try:
        await context.bot.send_message(chat_id=target_user_id, text=user_message_text, reply_markup=customer_buttons_markup, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ g·ª≠i ph·∫£n h·ªìi th∆∞·ªüng chia s·∫ª cho user {target_user_id}: {e}")
    try:
        await query.edit_message_text(text=admin_processed_text_share, reply_markup=None, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ edit tin nh·∫Øn admin cho ph·∫£n h·ªìi th∆∞·ªüng chia s·∫ª: {e}")


async def post_init_actions(application: Application) -> None:
    """L·∫•y username c·ªßa bot sau khi Application ƒë∆∞·ª£c kh·ªüi t·∫°o."""
    global BOT_USERNAME
    try:
        bot_info = await application.bot.get_me()
        BOT_USERNAME = bot_info.username
        logger.info(f"Bot username ƒë∆∞·ª£c ƒë·∫∑t khi kh·ªüi ƒë·ªông: {BOT_USERNAME}")
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ l·∫•y username c·ªßa bot khi kh·ªüi ƒë·ªông: {e}. Bot c√≥ th·ªÉ kh√¥ng t·∫°o link chia s·∫ª ƒë√∫ng.")


async def get_file_id_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.photo:
        photo_id = update.message.photo[-1].file_id
        file_size = update.message.photo[-1].file_size
        logger.info(f"Received photo. File ID: {photo_id}, Size: {file_size} bytes")

        # THAY ƒê·ªîI D√íNG N√ÄY (s·ª≠ d·ª•ng escape_markdown)
        escaped_photo_id = escape_markdown(photo_id, version=2) # Tho√°t c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát cho MarkdownV2
        await update.message.reply_text(
            f"File ID c·ªßa ·∫£nh n√†y l√†:\n`{escaped_photo_id}`\n\nB·∫°n c√≥ th·ªÉ copy ID n√†y ƒë·ªÉ s·ª≠ d·ª•ng trong code.",
            parse_mode=telegram.constants.ParseMode.MARKDOWN_V2
        )

def main() -> None:
    telegram_long_poll_timeout_seconds = 50 
    read_timeout_buffer_seconds = 10 

    application_builder = (
        Application.builder()
        .token(BOT_TOKEN)
        .connect_timeout(30) 
        .read_timeout(30)    
        .write_timeout(30)   
        .pool_timeout(60)    
        .connection_pool_size(10) 
        .get_updates_connect_timeout(10)
        .get_updates_read_timeout(telegram_long_poll_timeout_seconds + read_timeout_buffer_seconds) 
        .post_init(post_init_actions) 
    )
    application = application_builder.build()

    application.add_error_handler(error_handler)

    common_fallbacks = [
        CommandHandler('cancel', cancel), 
        CallbackQueryHandler(back_to_menu_handler, pattern='^back_to_menu$'), 
        CallbackQueryHandler(khuyen_mai_callback, pattern='^khuyen_mai$') 
    ]

    kl001_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(promo_KL001_callback, pattern='^promo_KL001$')],
        states={
            AGREE_TERMS_KL001: [CallbackQueryHandler(handle_agree_kl001_terms, pattern='^agree_terms_kl001$')],
            RECEIVE_USERNAME_KL001: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_username_kl001)],
        },
        fallbacks=common_fallbacks + [CallbackQueryHandler(re_enter_username_callback, pattern='^re_enter_username:KL001$')],
    )

    kl007_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(promo_KL007_callback, pattern='^promo_KL007$')],
        states={
            AGREE_TERMS_KL007: [CallbackQueryHandler(handle_agree_kl007_terms, pattern='^agree_terms_kl007$')],
            RECEIVE_USERNAME_KL007: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_username_kl007)],
        },
        fallbacks=common_fallbacks + [CallbackQueryHandler(re_enter_username_callback, pattern='^re_enter_username:KL007$')],
    )

    kl006_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(promo_KL006_callback, pattern='^promo_KL006$')],
        states={
            AGREE_TERMS_KL006: [CallbackQueryHandler(handle_agree_kl006_terms, pattern='^agree_terms_kl006$')],
            KL006_CHOOSE_GROUP_SIZE: [
                CallbackQueryHandler(kl006_group_size_selected, pattern=r'^kl006_select_group:\d+$')
            ],
            RECEIVE_USERNAMES_KL006: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_usernames_kl006),
                CallbackQueryHandler(kl006_reenter_usernames_after_agree_callback, pattern=r'^kl006_reenter_usernames_after_agree:\d+$')
            ],
        },
        fallbacks=common_fallbacks, 
    )

    app_promo_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(promo_app_experience_callback, pattern='^promo_app_experience$')],
        states={
            AGREE_TERMS_APP_PROMO: [CallbackQueryHandler(handle_agree_app_promo_terms, pattern='^agree_terms_app_promo$')],
            RECEIVE_USERNAME_APP_PROMO: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_username_app_promo)],
            AWAIT_IMAGE_CONFIRM_APP_PROMO: [CallbackQueryHandler(handle_image_confirm_app_promo, pattern=r'^app_promo_has_image:(yes|no)$')],
            RECEIVE_IMAGE_APP_PROMO: [MessageHandler(filters.PHOTO, receive_image_app_promo)],
        },
        fallbacks=common_fallbacks + [CallbackQueryHandler(re_enter_username_callback, pattern='^re_enter_username:APP_PROMO$')],
    )

    share_code_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(share_code_entry_point, pattern='^share_code_entry_point$')
        ],
        states={
            SHOW_SHARE_MENU: [ 
                CallbackQueryHandler(get_my_share_link_callback, pattern='^share_get_link$'),
                CallbackQueryHandler(request_code_reward_callback, pattern='^share_request_reward$'),
                CallbackQueryHandler(share_code_entry_point_cancel, pattern='^share_code_entry_point_cancel$') 
            ],
            AWAIT_USERNAME_FOR_SHARE_REWARD: [ 
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_username_for_share_reward),
                CallbackQueryHandler(share_code_entry_point_cancel, pattern='^share_code_entry_point_cancel$') 
            ],
        },
        fallbacks=common_fallbacks, 
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("id", get_chat_id)) 
    application.add_handler(CallbackQueryHandler(khuyen_mai_callback, pattern='^khuyen_mai$')) 

    application.add_handler(kl001_conv_handler)
    application.add_handler(kl007_conv_handler)
    application.add_handler(kl006_conv_handler)
    application.add_handler(app_promo_conv_handler)
    application.add_handler(share_code_conv_handler)

    application.add_handler(CallbackQueryHandler(handle_admin_response, pattern='^admin_response:'))
    application.add_handler(CallbackQueryHandler(handle_admin_kl006_response, pattern='^admin_kl006:'))
    application.add_handler(MessageHandler(
        filters.Chat(chat_id=ID_GROUP_PROMO) & filters.REPLY & filters.TEXT & ~filters.COMMAND,
        handle_admin_kl007_point_reply 
    ))
    application.add_handler(CallbackQueryHandler(handle_admin_share_code_response, pattern='^admin_share_resp:'))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, get_file_id_handler))

    logger.info("Bot ƒëang ch·∫°y...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)



if __name__ == "__main__":
    if not os.path.exists(DATA_FILE):
        save_bot_data({"users": {}, "referral_code_to_user_id_map": {}})
        logger.info(f"ƒê√£ kh·ªüi t·∫°o file d·ªØ li·ªáu r·ªóng: {DATA_FILE}")
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Bot ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
    except Exception as e:
        logger.critical(f"L·ªói nghi√™m tr·ªçng khi ch·∫°y bot: {e}", exc_info=True)