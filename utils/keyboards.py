# utils/keyboards.py
import random
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from texts import RESPONSE_MESSAGES
import config
from urllib.parse import quote


# --- General Purpose Keyboards ---

def create_main_menu_markup() -> InlineKeyboardMarkup:
    """Creates the main menu keyboard."""
    registration_link = f"{random.choice(config.GAME_LINKS).rstrip('/')}/Account/Register?f=425906"
    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES["khuyen_mai_button_text"], callback_data='show_promo_menu')],
        [InlineKeyboardButton(RESPONSE_MESSAGES["share_code_button_text"], callback_data='share_code_entry_point')],
        [
            InlineKeyboardButton(RESPONSE_MESSAGES["transaction_menu_button"], callback_data='transaction_entry_point'),
            InlineKeyboardButton(RESPONSE_MESSAGES["register_button_text"], url=registration_link)
        ],
        [
            InlineKeyboardButton(RESPONSE_MESSAGES["download_app_button_text"], url=config.APP_DOWNLOAD_LINK),
            InlineKeyboardButton(RESPONSE_MESSAGES["homepage_button_text"], callback_data='request_game_link')
        ],
        [
            InlineKeyboardButton(RESPONSE_MESSAGES["facebook_button_text"], url=config.FACEBOOK_LINK),
            InlineKeyboardButton(RESPONSE_MESSAGES["telegram_channel_button_text"], url=config.TELEGRAM_CHANNEL_LINK)
        ],
        [InlineKeyboardButton(RESPONSE_MESSAGES["cskh_button_text"], callback_data='cskh_vpn_warning')]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_back_to_show_promo_menu_markup() -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton(RESPONSE_MESSAGES["back_to_menu_button"], callback_data='show_promo_menu')]]
    return InlineKeyboardMarkup(keyboard)


# --- Promotion Flow Keyboards ---

def create_promo_menu_markup() -> InlineKeyboardMarkup:
    """Creates the promotions selection menu keyboard."""
    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES["promo_kl001_button"], callback_data='promo_KL001')],
        [InlineKeyboardButton(RESPONSE_MESSAGES["promo_kl006_button"], callback_data='promo_KL006')],
        #[InlineKeyboardButton(RESPONSE_MESSAGES["promo_kl007_button"], callback_data='promo_KL007')],
        #[InlineKeyboardButton(RESPONSE_MESSAGES["promo_app_button"], callback_data='promo_APP_PROMO')],
        [InlineKeyboardButton(RESPONSE_MESSAGES["back_to_menu_button"], callback_data='show_main_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_agree_keyboard(promo_code: str) -> InlineKeyboardMarkup:
    """Creates an 'Agree' and 'Back' keyboard for a specific promo."""
    keyboard = [
        [InlineKeyboardButton(RESPONSE_MESSAGES["agree_button_text"], callback_data=f'agree_terms:{promo_code}')],
        [InlineKeyboardButton(RESPONSE_MESSAGES["back_to_promo_menu_button_text"], callback_data='show_promo_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_kl006_group_size_keyboard() -> InlineKeyboardMarkup:
    """Creates keyboard for selecting KL006 group size."""
    keyboard = [
        [InlineKeyboardButton("Nh√≥m 3 th√†nh vi√™n", callback_data='kl006_select_group:3')],
        [InlineKeyboardButton("Nh√≥m 5 th√†nh vi√™n", callback_data='kl006_select_group:5')],
        [InlineKeyboardButton(RESPONSE_MESSAGES["back_to_promo_menu_button_text"], callback_data='show_promo_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_app_promo_image_confirm_keyboard() -> InlineKeyboardMarkup:
    """Creates 'Yes/No' keyboard for app promo image confirmation."""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ C√≥ ·∫£nh", callback_data='app_promo_has_image:yes'),
            InlineKeyboardButton("‚ùå Kh√¥ng c√≥ ·∫£nh", callback_data='app_promo_has_image:no')
        ],
        [InlineKeyboardButton(RESPONSE_MESSAGES["back_to_promo_menu_button_text"], callback_data='show_promo_menu')],
    ]
    return InlineKeyboardMarkup(keyboard)


# --- Sharing Feature Keyboards ---

def create_sharing_menu_markup(show_claim_button: bool = True) -> InlineKeyboardMarkup:
    """
    T·∫°o b√†n ph√≠m cho menu chia s·∫ª.

    Args:
        show_claim_button (bool): True n·∫øu mu·ªën hi·ªÉn th·ªã n√∫t "Nh·∫≠n th∆∞·ªüng".
                                  M·∫∑c ƒë·ªãnh l√† True.
    """
    keyboard = []

    # Ch·ªâ th√™m n√∫t "Nh·∫≠n th∆∞·ªüng" n·∫øu ƒëi·ªÅu ki·ªán cho ph√©p
    if show_claim_button:
        keyboard.append([
            InlineKeyboardButton(RESPONSE_MESSAGES["request_code_reward_button"], callback_data='share_request_reward')
        ])

    # C√°c n√∫t c√≤n l·∫°i lu√¥n ƒë∆∞·ª£c th√™m v√†o
    keyboard.append([
        InlineKeyboardButton(RESPONSE_MESSAGES["get_my_share_link_button"], callback_data='share_get_link')
    ])
    keyboard.append([
        InlineKeyboardButton(RESPONSE_MESSAGES["back_to_menu_button"], callback_data='show_main_menu')
    ])

    return InlineKeyboardMarkup(keyboard)


# --- Admin Interaction Keyboards ---

def create_admin_promo_buttons(claim_id: int, user_id: int, promo_code: str,usernames: list = None) -> InlineKeyboardMarkup:
    """Creates the standard processing buttons for a promo claim."""
    buttons = []
    # Add promo-specific buttons
    if promo_code == 'KL001':
        buttons.extend([
            [
                InlineKeyboardButton("‚ùå Sai ID", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:sai_id"),
                InlineKeyboardButton("‚úÖ Th√†nh C√¥ng", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:thanh_cong")
            ],
            [
                InlineKeyboardButton("üîó Ch∆∞a LK NH", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:CLKNH"),
                InlineKeyboardButton("üìû Sai TT (CSKH)", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:SaiTT")
            ],
            [
                InlineKeyboardButton("üö´ ƒê√£ nh·∫≠n KM001", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:kl001_da_nhan"),
                InlineKeyboardButton("üåê Tr√πng IP", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:trung_ip")
            ],
            [
                InlineKeyboardButton("üí∞ Ch∆∞a n·∫°p", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:chua_nap"),
                InlineKeyboardButton("üí∏ N·∫°p kh√¥ng ƒë·ªß", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:khong_du")
            ],
            [
                InlineKeyboardButton("üé≤ ƒê√£ tham gia c∆∞·ª£c", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:da_cuoc")
            ]
        ])
    elif promo_code == 'APP_PROMO':
        buttons.extend([
            [
                InlineKeyboardButton("‚ùå Sai ID", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:sai_id"),
                InlineKeyboardButton("‚úÖ Th√†nh C√¥ng", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:thanh_cong")
            ],
            [
                InlineKeyboardButton("üîó Ch∆∞a LK NH", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:CLKNH"),
                InlineKeyboardButton("üìû Sai TT (CSKH)", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:SaiTT")
            ],
            [
                InlineKeyboardButton("üö´ ƒê√£ nh·∫≠n KM App", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:app_promo_dn"),
                InlineKeyboardButton("üñºÔ∏è Y/c h√¨nh ·∫£nh", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:app_promo_ha")
            ],
            [
                InlineKeyboardButton("üåê Tr√πng IP (App)", callback_data=f"admin_response:{claim_id}:{user_id}:{promo_code}:app_promo_ip")
            ]
        ])
    elif promo_code == 'KL006':

        buttons.append([
            InlineKeyboardButton(
                "‚úÖ Th√†nh C√¥ng (Duy·ªát cho c·∫£ nh√≥m)",
                callback_data=f"admin_kl006:{claim_id}:{user_id}:GROUP:thanh_cong"
            )
        ])

    elif promo_code == 'KL007':
        buttons.append(
            [
                InlineKeyboardButton("‚ùå Sai ID", callback_data=f"admin_response:{claim_id}:{user_id}:KL007:sai_id"),
                InlineKeyboardButton("üé´ Kh√¥ng c√≥ v√© c∆∞·ª£c", callback_data=f"admin_response:{claim_id}:{user_id}:KL007:khong_co_ve_kl007")
            ]
        )
    return InlineKeyboardMarkup(buttons)


def create_admin_share_reward_buttons(claim_id: int, user_id: int, milestone: int) -> InlineKeyboardMarkup:
    """Creates processing buttons for a share reward claim."""
    keyboard = [
        [
            InlineKeyboardButton("‚ùå Sai ID", callback_data=f"admin_share_resp:{claim_id}:{user_id}:{milestone}:sai_id"),
            InlineKeyboardButton("‚úÖ Th√†nh C√¥ng", callback_data=f"admin_share_resp:{claim_id}:{user_id}:{milestone}:approved")
        ],
        [
            InlineKeyboardButton("üìû Li√™n h·ªá CSKH", callback_data=f"admin_share_resp:{claim_id}:{user_id}:{milestone}:cskh"),
            InlineKeyboardButton("üö´    L·∫°m D·ª•ng", callback_data=f"admin_share_resp:{claim_id}:{user_id}:{milestone}:lam_dung")
        ],
        [
            InlineKeyboardButton(
                "üîó Y/c LKNH", # "Y√™u c·∫ßu Li√™n k·∫øt Ng√¢n h√†ng"
                # ƒê·∫∑t action l√† `can_lknh` ƒë·ªÉ kh·ªõp v·ªõi key trong texts.py
                callback_data=f"admin_share_resp:{claim_id}:{user_id}:{milestone}:can_lknh"
            )
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_transaction_menu_markup() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m cho menu ch·ªçn N·∫°p ho·∫∑c R√∫t."""
    keyboard = [
        [
            InlineKeyboardButton(RESPONSE_MESSAGES["transaction_deposit_button"], callback_data='transaction_deposit'),
            InlineKeyboardButton(RESPONSE_MESSAGES["transaction_withdraw_button"], callback_data='transaction_withdraw')
        ],
        [InlineKeyboardButton(RESPONSE_MESSAGES["back_to_menu_button"], callback_data='show_main_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_admin_deposit_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m x·ª≠ l√Ω cho y√™u c·∫ßu h·ªó tr·ª£ n·∫°p ti·ªÅn c·ªßa admin."""
    # Ch√∫ng ta kh√¥ng c·∫ßn claim_id v√¨ y√™u c·∫ßu n·∫°p ti·ªÅn kh√¥ng ƒë∆∞·ª£c l∆∞u tr·ªØ l√¢u d√†i
    # Ta s·∫Ω d√πng user_id ƒë·ªÉ ƒë·ªãnh danh.

    # ƒê·ªãnh nghƒ©a callback_data v·ªõi m·ªôt prefix ri√™ng: `admin_deposit:`
    # Format: admin_deposit:<user_id>:<action>

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ Th√†nh c√¥ng", callback_data=f"admin_deposit:{user_id}:thanh_cong"),
            InlineKeyboardButton("‚ùå Sai ID", callback_data=f"admin_deposit:{user_id}:sai_id")
        ],
        [
            InlineKeyboardButton("üí∏ L√™n trang kh√°c", callback_data=f"admin_deposit:{user_id}:da_len_trang_khac"),
            InlineKeyboardButton("üö´ Kh√¥ng ph·∫£i CT", callback_data=f"admin_deposit:{user_id}:khong_phai_cua_chung_toi")
        ],
        [
            InlineKeyboardButton("üßæ Hƒê kh√¥ng ƒë√∫ng", callback_data=f"admin_deposit:{user_id}:hoa_don_khong_dung"),
            InlineKeyboardButton("‚è≥ Ch∆∞a nh·∫≠n ti·ªÅn", callback_data=f"admin_deposit:{user_id}:chua_nhan_duoc_tien")
        ],
        [
            InlineKeyboardButton("üîÑ L√†m l·∫°i l·ªánh", callback_data=f"admin_deposit:{user_id}:lam_lai_lenh"),
            InlineKeyboardButton("üìà ƒê√£ l√™n ƒëi·ªÉm", callback_data=f"admin_deposit:{user_id}:da_len_diem")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_admin_withdraw_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m x·ª≠ l√Ω cho y√™u c·∫ßu h·ªó tr·ª£ r√∫t ti·ªÅn c·ªßa admin."""
    # S·ª≠ d·ª•ng prefix 'admin_withdraw:' ƒë·ªÉ ph√¢n bi·ªát
    # Format: admin_withdraw:<user_id>:<action>

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ Th√†nh c√¥ng", callback_data=f"admin_withdraw:{user_id}:thanh_cong"),
            InlineKeyboardButton("üßæ G·ª≠i Hƒê", callback_data=f"admin_withdraw:{user_id}:gui_hd")
        ],
        [
            InlineKeyboardButton("‚ùå Sai TT", callback_data=f"admin_withdraw:{user_id}:sai_tt"),
            InlineKeyboardButton("üìà Y/c sao k√™", callback_data=f"admin_withdraw:{user_id}:yeu_cau_sao_ke")
        ],
        [
            InlineKeyboardButton("üõ†Ô∏è B·∫£o tr√¨", callback_data=f"admin_withdraw:{user_id}:bao_tri"),
            InlineKeyboardButton("üìû CSKH", callback_data=f"admin_withdraw:{user_id}:cskh")
        ],
        [
            InlineKeyboardButton("‚ùå Kh√¥ng c√≥ l·ªánh kh·ªõp", callback_data=f"admin_withdraw:{user_id}:ko_co_lenh")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_my_share_link_keyboard(share_text: str) -> InlineKeyboardMarkup:
    """
    T·∫°o b√†n ph√≠m cho m√†n h√¨nh hi·ªÉn th·ªã link chia s·∫ª c√° nh√¢n.
    Bao g·ªìm n√∫t "Chia s·∫ª ngay" v√† n√∫t "Quay l·∫°i menu chia s·∫ª".

    Args:
        share_text (str): N·ªôi dung vƒÉn b·∫£n s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn khi ng∆∞·ªùi d√πng chia s·∫ª.
    """
    callback_data = "cleanup_now"
    keyboard = [
        [InlineKeyboardButton(
            "üîó Chia s·∫ª ngay",
            switch_inline_query=share_text
        )],
        [InlineKeyboardButton(
            RESPONSE_MESSAGES.get("back_to_sharing_menu_button", "‚¨ÖÔ∏è Quay l·∫°i Menu"),
            callback_data=callback_data
        )]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_game_link_options_keyboard(current_link: str) -> InlineKeyboardMarkup:
    """
    T·∫°o b√†n ph√≠m t√πy ch·ªçn sau khi ƒë√£ cung c·∫•p link game.
    """
    base_web_app_url = "https://nntfb777.github.io/CoppyKL/copy.html"
    encoded_link = quote(current_link)
    # T·∫°o URL ƒë·∫ßy ƒë·ªß cho Web App, truy·ªÅn link c·∫ßn sao ch√©p v√†o sau d·∫•u '#'
    web_app_url_with_data = f"{base_web_app_url}#{encoded_link}"


    keyboard = [
        [
            InlineKeyboardButton(
                "üìã Sao ch√©p Link",
                web_app=WebAppInfo(url=web_app_url_with_data)
            )
        ],
        [
            InlineKeyboardButton(
                RESPONSE_MESSAGES["refresh_link_button_text"],
                callback_data='request_game_link'
            ),
            InlineKeyboardButton(
                RESPONSE_MESSAGES["report_link_button_text"],
                # G·∫Øn link hi·ªán t·∫°i v√†o callback_data ƒë·ªÉ bi·∫øt link n√†o b·ªã l·ªói
                callback_data=f'report_broken_link:{current_link}'
            )
        ],
        [InlineKeyboardButton(
            RESPONSE_MESSAGES["back_to_menu_button"],
            callback_data='show_main_menu'
        )]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_ask_image_proof_keyboard() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m h·ªèi ng∆∞·ªùi d√πng c√≥ ·∫£nh b·∫±ng ch·ª©ng kh√¥ng."""
    keyboard = [
        [
            InlineKeyboardButton(
                RESPONSE_MESSAGES["yes_button"],
                callback_data='report_error_with_image'
            ),
            InlineKeyboardButton(
                RESPONSE_MESSAGES["no_button"],
                callback_data='report_error_without_image'
            )
        ],
        [InlineKeyboardButton(
            RESPONSE_MESSAGES["back_to_menu_button"],
            callback_data='show_main_menu'
        )]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_vpn_confirmation_keyboard() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m ƒë·ªÉ x√°c nh·∫≠n vi·ªác s·ª≠ d·ª•ng VPN."""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ C√≥", callback_data="vpn_yes"),
            InlineKeyboardButton("‚ùå Kh√¥ng", callback_data="vpn_no")
        ],
        [InlineKeyboardButton(
            RESPONSE_MESSAGES["back_to_menu_button"],
            callback_data='show_main_menu'
        )]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_back_to_transaction_menu_markup() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m c√≥ n√∫t quay l·∫°i menu Giao d·ªãch."""
    keyboard = [[InlineKeyboardButton(
        "‚¨ÖÔ∏è Quay l·∫°i Menu N·∫°p/R√∫t",
        callback_data='show_transaction_menu'
    )]]
    return InlineKeyboardMarkup(keyboard)


# Code m·ªõi ƒë√£ s·ª≠a l·ªói
def create_cleanup_keyboard(is_fallback: bool = False) -> InlineKeyboardMarkup:
    """
    T·∫°o m·ªôt b√†n ph√≠m d·ªçn d·∫πp ti√™u chu·∫©n.
    Tham s·ªë is_fallback ƒë∆∞·ª£c gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c nh∆∞ng kh√¥ng c√≤n t√°c d·ª•ng.
    """
    # callback_data b√¢y gi·ªù lu√¥n lu√¥n l√† 'cleanup_now'
    callback_data = "cleanup_now"

    keyboard = [[InlineKeyboardButton(
        RESPONSE_MESSAGES.get("back_to_menu_button", "‚¨ÖÔ∏è Quay l·∫°i Menu"),
        callback_data=callback_data
    )]]
    return InlineKeyboardMarkup(keyboard)


def create_cskh_warning_keyboard() -> InlineKeyboardMarkup:
    """
    T·∫°o b√†n ph√≠m c·∫£nh b√°o VPN cho CSKH.
    Bao g·ªìm n√∫t ƒë·∫øn link CSKH th·∫≠t v√† n√∫t quay l·∫°i menu ch√≠nh.
    """
    keyboard = [
        [InlineKeyboardButton(
            "‚úÖ M·ªü trang CSKH", # VƒÉn b·∫£n m·ªõi cho r√µ r√†ng
            url=config.CSKH_LINK
        )],
        [InlineKeyboardButton(
            RESPONSE_MESSAGES["back_to_menu_button"],
            callback_data='show_main_menu' # D√πng 'show_main_menu' ƒë·ªÉ edit l·∫°i menu
        )]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_admin_response_keyboard() -> InlineKeyboardMarkup:
    """
    T·∫°o m·ªôt b√†n ph√≠m "Quay l·∫°i Menu" ƒë·∫∑c bi·ªát d√†nh cho c√°c tin nh·∫Øn
    do admin g·ª≠i cho ng∆∞·ªùi d√πng.
    """
    # callback_data n√†y l√† m·ªôt t√≠n hi·ªáu ƒë·∫∑c bi·ªát.
    callback_data = "cleanup_from_admin"

    keyboard = [[InlineKeyboardButton(
        RESPONSE_MESSAGES.get("back_to_menu_button", "‚¨ÖÔ∏è Quay l·∫°i Menu"),
        callback_data=callback_data
    )]]
    return InlineKeyboardMarkup(keyboard)